@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@{
    ViewBag.Title = "Diagram";
    var datos = Session["Permissions"].ToString();
    JObject allp = JsonConvert.DeserializeObject<JObject>(datos);
    var upd = "";
    var del = "";
    var add = "";
    foreach (string x in allp["processes"]["grant"])
    {
        if (x.Contains("u"))
        {
            upd = "u";
        }
        if (x.Contains("d"))
        {
            del = "d";
        }
        if (x.Contains("c"))
        {
            add = "c";
        }

    }
    var dataclient = Session["PermissionsClient"].ToString();
    JObject dataclientjo = JsonConvert.DeserializeObject<JObject>(dataclient);
    var updc = "";
    var delc = "";
    var addc = "";
    foreach (string x in dataclientjo["processes"]["grant"])
    {
        if (x.Contains("u"))
        {
            updc = "u";
        }
        if (x.Contains("d"))
        {
            delc = "d";
        }
        if (x.Contains("c"))
        {
            addc = "c";
        }
    }
}

@* Diagram List Modal *@
<div id="diagram_list_modal" class="modal hide fade" data-backdrop="static">
    <div class="modal-header">
        <h3 class="modal-header-text">Diagramas Guardados</h3>
    </div>
    <div class="modal-body">
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <input value="Crear Nuevo" class="btn blue" type="submit" id="create_scenario">
         <button class="btn" data-dismiss="modal" id="cancel_scenario_name">Cancelar</button>
    </div>
</div>

@* Set Scenario´s name Modal *@
<div id="scenario_name_modal" class="modal hide fade" data-backdrop="static">
    <div class="modal-header">
        <h3 class="modal-header-text">Nombre del Escenario</h3>
    </div>
    <div class="modal-body">
        <div class="row-fluid">
            <div class="span3"></div>
            <div class="span6">
                <input type="text" name="scenario_name" style="width:100%;" required />
            </div>
            <div class="span3"></div>
        </div>
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <button class="btn blue" type="submit" id="save_scenario_name">Guardar</button>
        <button class="btn" data-dismiss="modal" id="cancel_scenario_name">Cancelar</button>
    </div>
</div>

@* New Process Modal *@
<div id="process_modal" class="modal hide fade" data-backdrop="static">
    <div class="modal-header">
        <h3 class="modal-header-text">Nuevo Proceso</h3>
    </div>
    <div class="modal-body">
        <div class="row-fluid">
            <div class="span3"></div>
            <div class="span6">
                <div class="row-fluid">
                    <div class="span6">
                        <label for="process_name">Nombre del Proceso: </label>
                    </div>
                    <div class="span6">
                        <input type="text" name="process_name" required />
                    </div>
                </div>
                <br />
                <div class="row-fluid">
                    <div class="span6">
                        <label for="process_status">Estatus: </label>
                    </div>
                    <div class="span6">
                        <input type="text" name="process_status" required />
                    </div>
                </div>
                <div class="row-fluid">
                    <br>
                    <div class="span6">
                        <label for="process_type">Tipo: </label>
                    </div>
                    <div class="span6">
                        <input type="radio" name="type" value="manual" checked="checked" data-original-title="manual" rel="tooltip" data-placement="top">Manual<br>
                        <input type="radio" name="type" value="auto" data-original-title="automatico" rel="tooltip" data-placement="top">Automático<br>
                        <input type="radio" name="type" value="semi" data-original-title="semiautomatico" rel="tooltip" data-placement="top">Semiautomático
                    </div>
                </div>
            </div>
            <div class="span3"></div>
        </div>
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <button class="btn blue" type="submit" id="save_new_process">Guardar</button>
        <button class="btn" type="submit" data-dismiss="modal" id="cancel_process">Cancelar</button>
    </div>
</div>

@* Hardware/Location Modal *@
    <div id="hardware_modal" class="modal hide fade" data-backdrop="static" style="width: 300px">
        <div class="modal-header">
            <h3 class="modal-header-text">Hardware / Ubicación</h3>
            <h5 class="modal-header-text" id="processNameHeader"></h5>
            <button class="btn dark_green" id="addNewRule" title="Nueva Regla" rel="tooltip" data-placement="top">
                <i class="icon-plus icon-white"></i>
            </button>
        </div>
        <div class="modal-body setHeight">
            <div class="navbar-inner">
                <ul class="nav nav-tabs" id="tabHeader1">
                    <li class="active" id="HardwareTab">
                        <a href="#hardwareContent" data-toggle="tab">Hardware/Ubicación</a>
                    </li>
                    <li id="LocationTab">
                        <a href="#locationContent" data-toggle="tab">Ubicación</a>
                    </li>
                </ul>
            </div>
            <div class="tab-content" id="tabContent1">
                <div class="tab-pane active hardwareContent" id="hardwareContent">

                    <div class="row-fluid hardware_rule" id="rule_1">
                        <div class="span1"></div>
                        <div class="span5">
                            <label class="hardwareLabel">Hardware: </label>
                            <select class="selectHardware" name="hardware">
                                <option value="" data-smart="">Seleccione Hardware</option>
                                @foreach (JObject hardware in ViewBag.Hardware)
                                {

                                    <option value="@hardware["_id"]" data-smart="@hardware["smart"]">@hardware["name"]</option>
                                }
                            </select>
                        </div>

                        <div class="span6">
                            <label class="locationLabel">Ubicación: </label>
                            <div class="row-fluid location_list">
                                <div class="span10">
                                    <p>Selecciona una Ubicación</p>
                                    <ul></ul>
                                </div>
                                <div class="span2">
                                    <div class="hardware_tools">
                                        <button class="btn btn-mini blue" onclick="hardware_modal.newLocation(this)" title="Agregar Ubicación" rel="tooltip" data-placement="top">
                                            <i class="icon-plus icon-white"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="rulesContent"></div>
                </div>
                <div class="tab-pane locationContent" id="locationContent">
                    <div class="row-fluid hardware_rule location" id="rule_1">
                        <div class="span1"></div>
                        <div class="span6">
                            <label class="locationLabel">Ubicación: </label>
                            <div class="row-fluid location_list">
                                <div class="span10">
                                    <p>Selecciona una Ubicación</p>
                                    <ul></ul>
                                </div>
                                <div class="span2">
                                    <div class="location_tools">
                                        <button class="btn btn-mini blue" onclick="hardware_modal.newLocation(this)" title="Agregar Ubicación" rel="tooltip" data-placement="top">
                                            <i class="icon-plus icon-white"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>



        </div>
        <div class="modal-footer">
            <span width="80%" id="final_msg" class="error_msg"></span>
            <button class="btn blue" type="submit" id="save_hardware">Guardar</button>
            <button class="btn" type="submit" data-dismiss="modal" id="cancel_buttonHardware">Cancelar</button>
        </div>
    </div>

@*Location Modal *@
<div id="location_modal_process" class="modal hide fade modal-dialog" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        @*<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove" style="margin-top: 10px; margin-right: 10px"></i></button>*@
        <h5 class="modal-header-text">Agregar Ubicación</h5>
    </div>
    <div class="modal-header">
        <div class="divTreeSmall">
            @*<div class="well-content no-search">*@
                <div class="portlet-body fuelux">
                    <ul class="tree" id="category_tree">
                    </ul>
                </div>
            @*</div>*@
        </div>
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msglocation" class="error_msg"></span>
        <button class="btn blue" type="submit" id="save_location">Guardar</button>
            <button class="btn" type="submit" data-dismiss="modal">Cancelar</button>
    </div>
</div>

@* Work Area *@
<div class="widgets_area">
    <div class="row-fluid">
        <div class="span12">
            <div class="span8">
                <h3 class="ModuleTitle">Diagramador De Procesos</h3>
            </div>
            <div class="span4">
                <div class="search">
                    <input type="text" data-provide="typeahead" id="globalSearch" name="globalSearch" class="typehead span8" placeholder="Búsqueda" data-source="" />
                    <button type="submit" class="square-button green" id="globalSearchButton"><i class="icon-search"></i></button>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="row-fluid">

        <div class="span12">

            <div class="span3">
                <div class="light_blue set_color">
                    <div class="well-header widgetclient titleclient">
                        <div class="span12">
                            <div class="span9">
                                <h5>Herramientas</h5>
                            </div>
                        </div>
                    </div>
                    <div class="well-content">
                        <ul class="scenario-tools">
                            <li id="new_process">
                                <svg style="width: 70px; height: 50px; display: block; position: relative; overflow: hidden;">
                                    <g style="visibility: visible;">
                                        <rect width="65" height="45" fill="#ffffff" stroke="#000000"></rect>
                                        <g>
                                </svg>
                                <span>Proceso</span>
                            </li>
                            <li id="new_decision">
                                <svg style="width: 70px; height: 50px; display: block; position: relative; overflow: hidden;">
                                    <g transform="rotate(45)" style="visibility: visible;">
                                        <rect x="25" y="-20" width="30" height="30" fill="#ffffff" stroke="#000000"></rect>
                                        <g>
                                </svg>
                                <span>Decisión</span>
                            </li>
                            <li id="new_join">
                                <svg style="width: 140px; height: 30px; display: block; position: relative; overflow: hidden;">
                                    <g>
                                        <path d="M 10 20 L 120 20" fill="none" stroke="#000000" stroke-miterlimit="10"></path>
                                        <path d="M 120 20 L 117 15 L 130 20 L 117 25 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"></path>
                                    </g>
                                </svg>
                                <span>Flujo</span>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="light_blue set_color">
                    <div class="well-header widgetclient titleclient">
                        <div class="span12">
                            <div class="span9">
                                <h5>Procesos</h5>
                            </div>
                        </div>
                    </div>
                    <div class="well-content">
                        <ul id="processes_list" class="processes_list">
                            @foreach (JObject process in ViewBag.Processes)
                            {
                                <li data-id="@process["_id"]" data-status="@process["status"]">
                                    <span id="text_name">@process["name"]</span>
                                    <span class="tools">
                                        <button rel="tooltip" title="Agregar a escenario" class="btn btn-mini orange" id="add_process">
                                            <i class="icon-chevron-right icon-white"></i>
                                        </button>
                                    </span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>

            </div>

            <div class="span6">
                <div class="light_blue set_color">
                    <div class="well-header widgetclient titleclient">
                        <div class="span12">
                            <div class="span9">
                                <h5 id="scenario_name">Flujo Básico</h5>
                            </div>
                            <div class="span3">

                                <div id="btngrouplocation" class="btn-group pull-right">
                                    <button class="btn btn-mini light_blue fileinput-button" id="save_scenario" data-original-title="Guardar Escenario" rel="tooltip" data-placement="top">
                                        <i class="icon-save icon-white"></i>
                                    </button>
                                    @if (add == "c" && addc=="c")
                                    {
                                        <button class="btn btn-mini dark_green fileinput-button" id="new_scenario" data-original-title="Agregar" rel="tooltip" data-placement="top">
                                            <i class="icon-folder-open icon-white"></i>
                                        </button>
                                    }
                                    @if (del == "d" && delc=="d")
                                    {
                                        <button type="button" class="btn btn-mini red delete" id="delete_scenario" data-original-title="Eliminar" rel="tooltip" data-placement="top">
                                            <i class="icon-trash icon-white"></i>
                                        </button>
                                    }
                                    @if (upd == "u" && updc=="u")
                                    {
                                        <button type="button" class="btn btn-mini orange delete" id="edit_scenario" data-original-title="Editar" rel="tooltip" data-placement="top">
                                            <i class="icon-pencil icon-white"></i>
                                        </button>
                                    }
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="well-content">
                        <div class="scenario-container" id="scenario-container"></div>
                    </div>
                </div>
            </div>

            <!-- More Options -->
            <div class="span3">
                <div class="light_blue set_color">
                    <div class="well-header widgetclient titleclient">
                        <div class="span12">
                            <h5>Opciones</h5>
                            <div id="btngrouplocation" class="btn-group pull-right"></div>
                        </div>
                    </div>
                    <div class="well-content">
                        <form class="form-horizontal" id="processForm" method="post" enctype="multipart/form-data" autocomplete="off">
                            <div class="modal-header">
                                <div class="row-fluid">
                                    <div class="span6">
                                        <label>Nombre: </label>
                                        <input name="name" type="text" id="process_name" />
                                    </div>
                                </div>
                                <div class="row-fluid process_options">
                                    <div class="span6">
                                        <label class="lanelMargen">Estatus: </label>
                                        <input name="status" type="text" id="process_status" />
                                    </div>
                                </div>
                                <div class="process_options">
                                    
                                    <div class="row-fluid">
                                        <div class="span12">
                                            <label class="lanelMargen">Duración Mínima: </label>
                                            <div class="span12">
                                                <input name="min_length" type="number" class="input-small"/>
                                                <select name="min_length_type" class="input-small">
                                                    <option value="sec">segundo(s)</option>
                                                    <option value="min">minuto(s)</option>
                                                    <option value="hour" selected>hora(s)</option>
                                                    <option value="day">día(s)</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row-fluid">
                                        <div class="span12">
                                            <label class="lanelMargen">Duración Máxima: </label>
                                            <div class="span12">
                                                <input name="max_length" type="number" class="input-small"/>
                                                <select name="max_length_type" class="input-small">
                                                    <option value="sec">segundo(s)</option>
                                                    <option value="min">minuto(s)</option>
                                                    <option value="hour" selected>hora(s)</option>
                                                    <option value="day">día(s)</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row-fluid">
                                        <div class="span12">
                                            <label class="lanelMargen">Tipo de Proceso: </label>
                                            <div class="span12">
                                                <ul id="process_type" class="main">
                                                    <li><input type="radio" name="type" value="manual"/><span> Manual</span></li>
                                                    <li><input type="radio" name="type" value="auto"/><span> Automátio</span></li>
                                                    <li><input type="radio" name="type" value="semi"/><span> Semiautomático</span></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                               
                            </div>
                            <div class="show_less modal-body process_options">

                                <div class="navbar-inner">
                                    <ul class="nav nav-tabs" id="tabHeader1">
                                        <li class="active" id="staticFormHeader"><a href="#staticFieldsSection" data-toggle="tab">Hardware / Ubicación</a></li>
                                    </ul>
                                </div>
                                <div class="tab-content" id="tabContent1">
                                    <div class="tab-pane active staticFieldsSection perfilMargen" id="staticFieldsSection">

                                        <button class="btn button_green" id="config_hw">Configurar Reglas</button>

                                    </div>
                                </div>
                            </div>

                            <div class="modal-body decision_options">

                                <div class="navbar-inner">
                                    <ul class="nav nav-tabs" id="tabHeader1">
                                        <li class="active" id="staticFormHeader">
                                            <a href="#" data-toggle="tab">Conexiones</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="tab-content" id="tabContent1">
                                    <div class="tab-pane active staticFieldsSection perfilMargen">
                                        <ul id="connection_list">
                                            <li>Calidad</li>
                                            <li>Transferencia</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <span width="80%" id="final_msg" class="error_msg"></span>
                                <input value="Guardar" class="btn blue" type="submit" id="save_process">
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $("[rel=tooltip]").tooltip();
</script>

<script src="/Content/Scripts/joint.js"></script>
<script src="~/RivkaBase/Scripts/RivkaTree/RivkaTree.js"></script>
<link href="/Content/CSS/joint.css" rel="stylesheet">

<script>

    var diagram = {};
    var process = {};
    var decision = {};

    var diagram_modal = {};
    var scenario_name_modal = {};
    var process_modal = {};

    var scenario = {};

    var tree = new RivkaTree("category_tree", {
        method: RivkaTree.METHODS.AJAX,
        url: "/Processes/Process/getNodeContent",
        idKey: "_id",
        nameKey: "name",
        onNodeSelectAction: function () {
            var id = jQuery(this).closest("li").data("idcategory");
        }
    });

    jQuery(document).ready(function ($) {

        //Defining the process modal
        process_modal = {
            body: $("#process_modal"),

            open: function () {
                //Reset the form
                this.body.find("input[name!=type]").each(function () {
                    $(this).val("");
                });

                this.body.modal("show");
            },

            saveProcess: function () {
                var name = this.body.find("input[name=process_name]").val().trim();
                var status = this.body.find("input[name=process_status]").val().trim();
                var typeprocess= jQuery("input[name=type]:checked").val();

                if (name == "") {
                    this.body.find("input[name=process_name]").focus();
                    return false;
                }
                else if (status == "") {
                    this.body.find("input[name=process_status]").focus();
                    return false;
                }

                var process = { name: name, status: status, type: typeprocess}
                var id_process = "";
                $.ajax({
                    url: "/Processes/Process/SaveProcess",
                    type: "POST",
                    data: { process: JSON.stringify(process), id_process: id_process },
                    beforeSend: function () {
                        _loading();
                    },
                    success: function (data) {
                        var result = JSON.parse(data);
                        if (result.status == "success") {
                            _alert("success", "Proceso Guardado");

                            $("#processes_list").append(
                                $("<li>", { "data-id": result.data.process_id }).text(name).append(
                                    $("<span>", { "class": "tools" }).html(
                                        '<button rel="tooltip" title="Agregar a escenario" class="btn btn-mini orange" id="add_process"><i class="icon-chevron-right icon-white"></i></button>'
                                    )
                                )
                            );
                            //Set the click event
                            $(".btn#add_process").unbind("click.addProcess", addProcessFromList);
                            $(".btn#add_process").bind("click.addProcess", addProcessFromList);

                            //Add process to the scenario
                            var newProcess = { processId: result.data.process_id, type: "process", name: name, status: status };
                            diagram.setProcess(newProcess);

                            process_modal.close();
                        }
                        else {
                            _alert("error", result.message);
                            $("input[name=process_name]").focus();
                        }
                    },
                    error: function () {
                        _alert("error", "Ocurrio un error, intente más tarde")
                    },
                    complete: _loading
                });
            },

            close: function () {
                this.body.modal("hide");
            },

            binding: (function () {
                $("#save_new_process").click(function () {
                    process_modal.saveProcess();
                });
            })()
        };

        //Defining the diagram modal
        diagram_modal = {

            body: $("#diagram_list_modal"),

            getList: function () {
                $.ajax({
                    url: "/Processes/Diagram/GetDiagrams",
                    type: "POST",
                    data: {},
                    beforeSend: _loading(),
                    success: function (data) {
                        diagram_modal.body.find(".modal-body").html(data);
                    },
                    error: function () {
                        _alert("error", "Ocurrio un error, intente más tarde");
                    },
                    complete: function () {
                        _loading();
                    }
                });
            },

            open: function () {
                this.body.modal("show");
                this.getList();
            },

            close: function () {
                this.body.modal("hide");
            },

            resetScenario : function(){
                diagram.clearScenario();
                $("#scenario_name").text("Flujo Básico");
                scenario = {};
                diagram.resetDiagram();
            },

            setScenario : function(scen){
                scenario = scen;
            },

            //gonzalo
            deleteDiagram: function(diagramId){
                if( diagram.id_scenario != null && diagram.id_scenario != "" ){
                    _confirm({
                        title: "Borrar Diagrama",
                        message: "Desea borrar este diagrama?",
                        action: function () {
                            $.ajax({
                                url: "/Processes/Diagram/DeleteDiagram",
                                type: "POST",
                                data: { id_diagram: diagramId },
                                beforeSend: _loading(),
                                success: function (data) {
                                    _alert("success", "Diagrama Borrado");
                                    diagram_modal.resetScenario();
                                    diagram_modal.getList();
                                    $("#diagram_list_modal").modal("show");
                                },
                                error: function () {
                                    _alert("error", "Ocurrio un error, intente más tarde")
                                },
                                complete: function () {
                                    _loading()
                                }
                            });
                        }
                    });
                }
            },

            //gonzalo
            loadScenario: function(diagramId){
                $.ajax({
                    url: "/Processes/Diagram/GetDiagram",
                    type: "POST",
                    data: { id_diagram: diagramId },
                    beforeSend: _loading(),
                    success: function (data) {
                        scenario = JSON.parse(data);
                        diagram.loadScenario(scenario);
                        diagram_modal.close();
                    },
                    error: function () {
                        _alert("error", "Ocurrio un error, intente más tarde");
                    },
                    complete: function () {
                        _loading()
                    }
                });
            },

            binding: (function () {
                $("#create_scenario").click(function () {
                    diagram_modal.close();
                    scenario_name_modal.open();
                    diagram.clearScenario();
                    diagram.id_scenario = "";
                });

                //gonzalo
                $("#delete_scenario").unbind("click.delete");
                $("#delete_scenario").bind("click.delete", function(){
                    diagram_modal.deleteDiagram( scenario._id );
                });
            })()
        };

        //Defining the Hardware-Location configuration modal
        hardware_modal = {
            body: $("#hardware_modal"),
            location: $("#location_modal_process"),
            hardwareList: @(new HtmlString(ViewBag.Hardware.ToString())),
            init: function(){
                tree.init({ id: "null", name: "Home" });
                $("#rulesContent").html("");
                jQuery("select[name='hardware']").val("");
                jQuery("div[class='row-fluid location_list']").find("p").show();
                jQuery("div[class='row-fluid location_list']").find("li").remove();
                jQuery(jQuery("label[class='locationLabel'] label")).remove();
                jQuery(jQuery("label[class='hardwareLabel'] label")).remove();
                jQuery("div[class='row-fluid location_list']").find('button[class="btn btn-mini blue"]').removeAttr("disabled","disabled");
                jQuery(jQuery('div[class="row-fluid hardware_rule"]')).removeData();

            },
            newRule: function(){
                    list = "";
                    for(i = 0; i<hardware_modal.hardwareList.length;i++){
                        list += '<option value="' + hardware_modal.hardwareList[i]["_id"] + '" data-smart="'+ hardware_modal.hardwareList[i]["smart"]+'">'+
                            hardware_modal.hardwareList[i]["name"] + '</option>} ';
                    }

                    $("#rulesContent").append(
                        '<div class="row-fluid hardware_rule">'+
                            '<div class="span1">'+
                                '<button class="btn red" id="removeRule" onClick="hardware_modal.deleteRule(this)" title="Eliminar Regla" rel="tooltip" data-placement="top">'+
                                    '<i class="icon-remove icon-white"></i>'+
                                '</button>'+
                            '</div>'+
                            '<div class="span5">'+
                                '<label class="hardwareLabel">Hardware: </label>'+
                                '<select class="selectHardware" name="hardware">' +
                                    '<option value="" data-smart="">Seleccione Hardware</option>'+ 
                                    list +
                                '</select>'+
                            '</div>'+
                            '<div class="span6">'+
                                '<label class="locationLabel">Ubicación: </label>'+
                                '<div class="row-fluid location_list">'+
                                    '<div class="span10">'+
                                        '<p>Selecciona una Ubicación</p>'+
                                        '<ul>'+
                                        '</ul>'+
                                    '</div>'+
                                '<div class="span2">'+
                                    '<div class="hardware_tools">'+
                                        '<button class="btn btn-mini blue" onclick="hardware_modal.newLocation(this)" id="addNewLocation" title="Agregar Ubicación" rel="tooltip" data-placement="top">'+
                                            '<i class="icon-plus icon-white"></i>'+
                                        '</button>'+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>'+
                    '</div>'
                    );
                
                hardware_modal.unbinding();
            },
            saveRules: function(){
                result = "";
                var result1="";
                if(process.type=="auto" || process.type=="semi"){
                    //Validate information
                    errorValidate = 0;
                    for(i=0 ; i < jQuery("select[name='hardware']").length ; i++){        
                        //reset Values
                        jQuery(jQuery("label[class='locationLabel']")[i]).find('label').remove();
                        jQuery(jQuery("label[class='hardwareLabel']")[i]).find('label').remove();

                        if(jQuery(jQuery("select[name='hardware']")[i]).val().toString()==""){
                            $($("label[class='hardwareLabel']")[i]).append($("<label>").text("¡Verifica!").css("color","red").css("padding-left", "10px"));
                            errorValidate++;
                        }
                        if(jQuery(jQuery("div[class='row-fluid location_list']")[i]).find("li").length == 0){
                            $($("label[class='locationLabel']")[i]).append($("<label>").text("¡Verifica!").css("color","red").css("padding-left", "10px"));
                            errorValidate++;
                        }
                    }
                    if(errorValidate > 0){ 
                        _alert("error","Verifique la información!");
                        return false;
                    }

                    //Send information
                    
                    for(i = 0 ; i < jQuery("div[class='row-fluid hardware_rule']").length ; i++){ 
                        hardwareRow = "{'Hardware':'"
                        hardwareRow += jQuery(jQuery("div[class='row-fluid hardware_rule']")[i]).find("option:selected").val().toString() + "' ,";

                        hardwareRow += "'ruleId' : '";
                        if(jQuery(jQuery("div[class='row-fluid hardware_rule']")[i]).data("id") == null){
                            hardwareRow += "null',";
                        }else{
                            hardwareRow += jQuery(jQuery("div[class='row-fluid hardware_rule']")[i]).data("id") + "' ,";
                        }

                        hardwareRow += " 'Locations':[";
                    
                        for(x = 0 ; x < jQuery(jQuery("div[class='row-fluid hardware_rule']")[i]).find('li').length ; x++){
                            hardwareRow += "'" + jQuery(jQuery(jQuery("div[class='row-fluid hardware_rule']")[i]).find('li')[x]).data("id").toString() + "',";
                        }
                        hardwareRow +="]},";  
                    
                        result += hardwareRow;
                    }

                }
                /*TODO*/
                if(process.type=="manual" || process.type=="semi"){
                    result1 += "[";
                    
                    for(x = 0 ; x < jQuery(jQuery("div[class='row-fluid hardware_rule location']")[0]).find('li').length ; x++){
                        result1 += "'" + jQuery(jQuery(jQuery("div[class='row-fluid hardware_rule location']")[0]).find('li')[x]).data("id").toString() + "',";
                    }
                    result1 +="]";  
                }
                

                if(this.idProcess == ""){ 
                    _alert("error","Selecciona un proceso!"); 
                    this.body.modal("hide");
                    hardware_modal.init();
                    return false;
                }

                $.ajax({
                    url: "/Processes/Process/SaveRules",
                    data: {rulesString : result , locationsString:result1, id_process : this.idProcess },
                    beforeSend: _loading(),
                    type:"POST",
                    success: function (data) {
                        _loading();
                        _alert("success","Guardado Correctamente");
                    },
                    error: function () {
                        _loading();
                        _alert("error", "Ha ocurrido un error");
                    }

                });

                this.body.modal("hide");
                hardware_modal.init();
            },
            deleteRule: function(thisRule){
                _confirm({
                    title: "Eliminar Hardware/Ubicación",
                    message: "¿Seguro que desea eliminarlo?",
                    action: function () {
                        $(thisRule).closest('div[class="row-fluid hardware_rule"]').remove();
                    }
                });
            },
            validateHardare: function(thisSelect){

                idHardware = $(thisSelect).find('option:selected').val();
               
                $(thisSelect).closest('div[class="row-fluid hardware_rule"]').find('p').show();
                $(thisSelect).closest('div[class="row-fluid hardware_rule"]').find("li").remove();
                $(thisSelect).closest('div[class="row-fluid hardware_rule"]').find('button[class="btn btn-mini blue"]').removeAttr("disabled","disabled");
                    
                cant = 0;
                for(i=0 ; i < jQuery("select[name='hardware']").length ; i++){        
                    if(jQuery(jQuery("select[name='hardware']")[i]).val().toString() == idHardware.toString() && idHardware.toString() != ""){
                        cant++;
                    }
                }

                if(cant > 1){
                    $(thisSelect).val("");
                    _alert("error", "Hardware ya seleccionado!");
                }
            },
            newLocation: function(thishardware){
                tree.init({ id: "null", name: "Home" });
                this.thisHardware = thishardware;                
                this.location.modal("show");
            },

            saveLocation: function(){
                if($(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('select').val()=="" && (process.type=="auto" || process.type=="semi" ) ) {
                    _alert("error", "Selecciona un hardware primero!");
                    return false;
                }
                if(jQuery('#category_tree label[class="selected"]').closest("li").data("idcategory")==null){
                    _alert("error","Seleccione una ubicación!");
                    return false;
                }
                //check no repit locations
                if($(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('li').length > 0){
                    for(i=0 ; i < $(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('li').length ; i++){
                        if($($(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('li')[i]).data("id").toString() == 
                            jQuery('#category_tree label[class="selected"]').closest("li").data("idcategory").toString()){
                            _alert("error","La ubicación ya existe!");
                            return false;
                        }
                    }
                }
                this.location.modal("hide");

                if(process.type=="auto" || process.type=="semi"){
                    $(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('p').hide();
                    $(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('ul').append(
                        $("<li />").text(jQuery('#category_tree label[class="selected"]').closest("label").text()).attr(
                        "data-id",jQuery('#category_tree label[class="selected"]').closest("li").data("idcategory")).append(
                            $("<button />").addClass("btn btn-mini red removeLocation").attr("title","Remover Ubicación").attr("rel","tooltip").attr("data-placement","top").append(
                        $("<i />").addClass("icon-remove icon-white").attr("onClick","hardware_modal.deleteLocation(this)")))
                      );  

                    //check if it is a smart hardware /disable the button of adding locations
                    if($(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('option:selected').data("smart")==false ||
                        $(this.thisHardware).closest('div[class="row-fluid hardware_rule"]').find('option:selected').data("smart")=="False" ){
                        $(this.thisHardware).closest('button[class="btn btn-mini blue"]').attr("disabled","disabled");
                    }
                }

                if(process.type=="manual" || process.type=="semi"){
                
                    $(this.thisHardware).closest('div[class="row-fluid hardware_rule location"]').find('p').hide();
                    $(this.thisHardware).closest('div[class="row-fluid hardware_rule location"]').find('ul').append(
                        $("<li />").text(jQuery('#category_tree label[class="selected"]').closest("label").text()).attr(
                        "data-id",jQuery('#category_tree label[class="selected"]').closest("li").data("idcategory")).append(
                            $("<button />").addClass("btn btn-mini red removeLocation").attr("title","Remover Ubicación").attr("rel","tooltip").attr("data-placement","top").append(
                        $("<i />").addClass("icon-remove icon-white").attr("onClick","hardware_modal.deleteLocation(this)")))
                      );  
                }
    
                

                tree.init({ id: "null", name: "Home" });
            },    
            deleteLocation: function(thisLocation){
                _confirm({
                    title: "Eliminar Ubicación",
                    message: "¿Seguro que desea eliminarlo?",
                    action: function () {
                        if($(thisLocation).closest('div').find("li").length == 1){
                            $(thisLocation).closest('div').find('p').show();
                            $(thisLocation).closest('div[class="row-fluid hardware_rule"]').find('button[class="btn btn-mini blue"]').removeAttr("disabled","disabled");
                        }
                        $(thisLocation).closest("li").remove();
                    }
                });
            },
            getList: function () {
                $.ajax({
                    url: "/Processes/Process/getRules",
                    type: "POST",
                    data: {id_process : this.idProcess },
                    beforeSend: _loading(),
                    success: function (data) {
                        if(data == null || data == "" || data=="[]") { _loading(); return; }
                        data = JSON.parse(data);

                        //Rule 0
                        nameLocation = data[0]["nameLocations"];
                        nameLocation = nameLocation.split(",");
                        $($('div[class="row-fluid hardware_rule"]')[0]).find("select").val(data[0]["Hardware"]);
                        if(data[0]["Locations"].length > 0 )  $($('div[class="row-fluid hardware_rule"]')[0]).find("p").hide();
                        if( $($('div[class="row-fluid hardware_rule"]')[0]).find("option:selected").data("smart") == false || 
                            $($('div[class="row-fluid hardware_rule"]')[0]).find("option:selected").data("smart") == "False" ){
                            $($('div[class="row-fluid hardware_rule"]')[0]).find('button[class="btn btn-mini blue"]').attr("disabled","disabled");
                        }

                        jQuery(jQuery('div[class="row-fluid hardware_rule"]')[0]).data("id",data[0]["rule"]);

                        for(iz = 0 ; iz < data[0]["Locations"].length ; iz++){
                            $($('div[class="row-fluid hardware_rule"]')[0]).find("ul").append($("<li />").data("id",data[0]["Locations"][iz]).text(nameLocation[iz]).append(
                            $("<button />").addClass("btn btn-mini red removeLocation").attr("title","Remover Ubicación").attr("rel","tooltip").data("placement","top").append(
                            $("<i />").addClass("icon-remove icon-white").attr("onClick","hardware_modal.deleteLocation(this)"))));
                        }

                        //Rule x>0
                        for(ix = 1 ; ix < data.length ; ix++){
                            hardware_modal.newRule();

                            nameLocation = data[ix]["nameLocations"];
                            nameLocation = nameLocation.split(",");
                            $($('div[class="row-fluid hardware_rule"]')[ix]).find("select").val(data[ix]["Hardware"]);
                            if(data[ix]["Locations"].length > 0 )  $($('div[class="row-fluid hardware_rule"]')[ix]).find("p").hide();
                            if( $($('div[class="row-fluid hardware_rule"]')[ix]).find("option:selected").data("smart") == false || 
                            $($('div[class="row-fluid hardware_rule"]')[ix]).find("option:selected").data("smart") == "False" ){
                                $($('div[class="row-fluid hardware_rule"]')[ix]).find('button[class="btn btn-mini blue"]').attr("disabled","disabled");
                            }

                            jQuery(jQuery('div[class="row-fluid hardware_rule"]')[ix]).data("id",data[ix]["rule"]);

                            for(iz = 0 ; iz < data[ix]["Locations"].length ; iz++){
                                $($('div[class="row-fluid hardware_rule"]')[ix]).find("ul").append($("<li />").data("id",data[ix]["Locations"][iz]).text(nameLocation[iz]).append(
                                $("<button />").addClass("btn btn-mini red removeLocation").attr("title","Remover Ubicación").attr("rel","tooltip").data("placement","top").append(
                                $("<i />").addClass("icon-remove icon-white").attr("onClick","hardware_modal.deleteLocation(this)"))));

                            }
                        }

                        _loading();
                    },
                    error: function () {
                        _loading();
                        _alert("error", "Ocurrio un error, intente más tarde");
                    }
                });
            },

            getList2: function () {
                $.ajax({
                    url: "/Processes/Process/getLocations",
                    type: "POST",
                    async:false,
                    data: {id_process : this.idProcess },
                    beforeSend: _loading(),
                    success: function (data) {
                        if(data == null || data == "" || data=="[]") { _loading(); return; }
                        data = JSON.parse(data);
                        if(data.length > 0 )  $($('div[class="row-fluid hardware_rule location"]')[0]).find("p").hide();
                        for(iz = 0 ; iz < data.length ; iz++){
                            $($('div[class="row-fluid hardware_rule location"]')[0]).find("ul").append($("<li />").data("id",data[iz].id).text(data[iz].nameLocation).append(
                            $("<button />").addClass("btn btn-mini red removeLocation").attr("title","Remover Ubicación").attr("rel","tooltip").data("placement","top").append(
                            $("<i />").addClass("icon-remove icon-white").attr("onClick","hardware_modal.deleteLocation(this)"))));
                        }

                        _loading();
                    },
                    error: function () {
                        _loading();
                        _alert("error", "Ocurrio un error, intente más tarde");
                    }
                });
            },
            open: function () {
                $("#processNameHeader").html("Proceso: "+ process.name);
                this.idProcess = process.id;
                
                if(process.type=="semi"){
                    jQuery("#HardwareTab").show();
                    jQuery("#HardwareTab").addClass("active");
                    jQuery("#LocationTab").show();
                    jQuery("#LocationTab").removeClass("active");
                    jQuery("#hardwareContent").show();
                    jQuery("#hardwareContent").addClass("active");
                    jQuery("#locationContent").hide();
                    jQuery("#locationContent").removeClass("active");
                    this.getList();
                    this.getList2();
                }
                if(process.type=="manual"){
                    jQuery("#HardwareTab").hide();
                    jQuery("#HardwareTab").removeClass("active");
                    jQuery("#LocationTab").show();
                    jQuery("#LocationTab").addClass("active");
                    jQuery("#hardwareContent").hide();
                    jQuery("#hardwareContent").removeClass("active");
                    jQuery("#locationContent").show();
                    jQuery("#locationContent").addClass("active");
                    this.getList2();
                }
                if(process.type=="auto"){
                    this.getList();
                    jQuery("#HardwareTab").show();
                    jQuery("#HardwareTab").addClass("active");
                    jQuery("#LocationTab").hide();
                    jQuery("#LocationTab").removeClass("active");
                    jQuery("#hardwareContent").show();
                    jQuery("#hardwareContent").addClass("active");
                    jQuery("#locationContent").hide();
                    jQuery("#locationContent").removeClass("active");
                }
                
                this.body.modal("show");
            },

            close: function () {
                this.body.modal("hide");
            },
            unbinding:(function(){
                $( "#hardware_modal select" ).unbind();
                $( "#hardware_modal select" ).bind( "change", function() {
                    hardware_modal.validateHardare(this);
                });
                $("#addNewLocation").bind("click",function(){
                    hardware_modal.newLocation(this);
                });
            }),
            binding: (function () {
                $("#config_hw").bind("click",function () {
                    hardware_modal.open();
                    return false;
                });
                $("#addNewLocation").bind("click",function(){
                    hardware_modal.newLocation(this);
                });
                $("#addNewRule").bind("click",function(){
                    hardware_modal.newRule();
                });
                $("#save_location").bind("click",function(){
                    hardware_modal.saveLocation(this);
                });
                $("#save_hardware").bind("click",function(){
                    hardware_modal.saveRules(this);
                });
                $("#cancel_buttonHardware").bind("click",function(){
                    hardware_modal.init();
                });
                $( "#hardware_modal select" ).bind( "change", function() {
                    hardware_modal.validateHardare(this);
                });

                $("#LocationTab").bind("click", function() {
                    $("#addNewRule").hide();
                    jQuery("#locationContent").show();
                    jQuery("#hardwareContent").hide();
                });

                $("#HardwareTab").bind("click", function() {
                    $("#addNewRule").show();
                    jQuery("#locationContent").hide();
                    jQuery("#hardwareContent").show();
                });

            })()
        };

        //Defining the diagram modal
        scenario_name_modal = {

            body: $("#scenario_name_modal"),

            getList: function () {
                $.ajax({
                    url: "/Processes/Diagram/GetDiagrams",
                    type: "POST",
                    data: {},
                    beforeSend: _loading(),
                    success: function (data) {
                        diagram_modal.body.find(".modal-body").html(data);
                    },
                    error: function () {
                        _alert("error", "Ocurrio un error, intente más tarde");
                    },
                    complete: function () {
                        _loading();
                    }
                });
            },

            open: function () {
                this.body.modal("show");

                this.body.find("input[name=scenario_name]").val(diagram.name);
            },

            close: function () {
                this.body.modal("hide");
            },

            binding: (function () {
                $("#scenario_name_modal").on("shown", function () {
                    $(this).find("input").focus();
                });
                $("#save_scenario_name").click(function () {
                    var scenario_name = $("input[name=scenario_name]").val().trim();
                    var exists = diagram.diagramNameExists(scenario_name);
                    if (scenario_name != "" && exists != true) {
                        diagram.name = scenario_name;
                        $("#scenario_name").html(scenario_name);
                        scenario_name_modal.close();
                    }
                    else {
                        $("input[name=scenario_name]").focus();
                        _alert("error", "El nombre del diagrama ya está siendo utilizado.");
                    }
                });
            })()
        };

        //Object used to handle the diagram
        diagram = {
            draw: null, paper: null, processes: [], connections: [], editing: null,
            old_scenario: [], join: { processA: null, processB: null },
            name: "", id_scenario: "",

            init: function () {

                if (this.draw != null)
                    this.draw.destroy();

                var graph = new joint.dia.Graph;

                var paper = new joint.dia.Paper({
                    el: $("#scenario-container"),
                    width: "100%",
                    height: "400px",
                    model: graph,
                    gridSize: 1
                });

                this.draw = graph;
                this.paper = paper;

            },

            resetDiagram: function(){
                this.processes = [];
                this.connections = [];
                this.editing = null;
                this.old_scenario = [];
                this.join = { processA: null, processB: null };
                this.name = "";
                this.id_scenario = "";
            },

            destroy: function () {
                if (this.draw != null) {
                    this.draw.parent.firstChild.remove()
                    this.draw = null
                }
            },

            setProcess: function (element) {
                var attr = {
                    position: {},
                    size: {},
                    attrs: { rect: {}, text: {} }
                };

                if (typeof (element.shape) != "undefined") {
                    attr = element.shape;
                    attr.attrs.text = {
                        fill : "white",
                        text : $("li[data-id=" + element.processId + "]").find("#text_name").text()
                    };
                    attr.attrs.text["font-weight"] = "bold";
                }
                else {
                    attr.position.x = 10;
                    attr.position.y = 10;
                    attr.size.width = 130;
                    attr.size.height = 40;
                    attr.attrs.rect.fill = "#5FB3F9";

                    attr.attrs.text.fill = "white";
                    attr.attrs.text["font-weight"] = "bold";
                    attr.attrs.text.text = element.name;
                }

                attr.opacity = 1;
                var shape;

                if (element.type == "process") {
                    shape = new joint.shapes.basic.Rect(attr);
                    shape.type = "process";
                    shape.status = element.status;
                }

                if (element.type == "decision") {
                    shape = new joint.shapes.basic.Rect({
                        position: { x: attr.position.x, y: attr.position.y },
                        size: { width: 45, height: 45 },
                        attrs: {
                            rect: { fill: "yellow" }
                        }
                    });

                    shape.type = "decision";
                    shape.rotate(45);
                }

                //Set a custom id to get reference to it
                if (typeof element.processId != "undefined")
                    shape.processId = element.processId;
                else{
                    shape.processId = shape.cid;
                }


                //save reference in diagram.processes
                this.processes.push(shape);

                //draw into the diagram
                try {
                    this.draw.addCell(shape);
                }
                catch (Exception) { }

                //Function to allow the edition for every element in the scenario
                var setProcess = function (cellView) {
                    if (cellView.model.type == "process") {
                        var processData = null;

                        $(".process_options").show();
                        $(".decision_options").hide();

                        process.bindActions();
                        decision.unbindActions();

                        $.ajax({
                            url: "/Processes/Process/GetProcess",
                            type: "POST",
                            data: { id_process: cellView.model.processId},
                            success: function(data){
                                processData = JSON.parse(data);

                                process.set("name", cellView.model.attributes.attrs.text.text);
                                process.set("id", cellView.model.processId);
                                process.set("status", cellView.model.status);
                                process.set("type", processData["type"]);
                                if(processData["min_duration"] != undefined)
                                    process.set("min_duration", processData["min_duration"]);
                                else
                                    process.set("min_duration", {duration: 0, type: ""});
                                if(processData["max_duration"] != undefined)
                                    process.set("max_duration", processData["max_duration"]);
                                else
                                    process.set("max_duration", {duration: 0 , type: ""});

                                process.fillForm();

                            },
                            error: function(errorThrown){
                               
                            }
                        });
                        
                    }
                    else if(cellView.model.type == "decision"){
                        $(".process_options").hide();
                        $(".decision_options").show();

                        process.unbindActions();
                        decision.bindActions();

                        var decisionName = cellView.model.attributes.attrs.text.text;
                        
                        decision.set("name", decisionName);
                        decision.set("id", cellView.model.id);

                        decision.fillForm();

                        var connectionList = $("#connection_list");
                        connectionList.html("");

                        var Links = diagram.draw.getConnectedLinks(cellView.model, {outbound: true});

                        if(Links.length > 0){
                            for(var link in Links){
                                var target = Links[link].attributes.target.id; 
                                var name = diagram.paper.getModelById(target).attributes.attrs.text.text;
                                connectionList.append("<li data-id='"+ target +"'>"+name+"</li>");
                            }
                        }
                        else{
                            connectionList.html("<li>No existe ninguna conexión");
                        }
                    }
                }
                //Function to remove an element(basicRect) from the scenario
                var removeProcess = function (cellView) {
                    var modelId = $(this).closest(".basic.Rect").attr("model-id");
                    var model = diagram.paper.getModelById(modelId);

                    //Confirm before remove
                    _confirm({
                        title: "Remover Elemento",
                        message: "Desea remover este elemento?",
                        action: function () {
                            model.remove()
                        }
                    });
                }

                //Remove the process from the processes list
                $("li[data-id=" + shape.processId + "]").hide();

                $(".basic.Rect .tool-remove").unbind("click.remove", removeProcess);
                $(".basic.Rect .tool-remove").bind("click.remove", removeProcess);

                this.paper.off("cell:pointerdown");
                this.paper.on("cell:pointerdown", setProcess);

                process.set("name", element.name);
                process.set("id", shape.processId);
                process.set("status", shape.status);
                process.fillForm();

                return shape;
            },

            //Start the relation of two processes, clicking the elements to join
            startJoining: function () {
                this.join.processA = null;
                this.join.processB = null;

                var setJoinEvents = function () {

                    try {
                        diagram.paper.on("cell:pointerdown", joinEvent);
                    }
                    catch (Exception) { };
                };

                var unsetJoinEvents = function () {
                    diagram.join.processA = null;
                    diagram.join.processB = null;
                    $("#new_join").removeClass("selected");

                    try {
                        diagram.paper.off("cell:pointerdown", joinEvent);
                    }
                    catch (Exception) { };
                };

                var joinEvent = function (cellView) {
                    if (!diagram.join.processA) {
                        diagram.join.processA = cellView.model.id;
                    }
                    else if (diagram.join.processA != cellView.model.id) {
                        diagram.join.processB = cellView.model.id;
                        diagram.joinProcesses();
                        unsetJoinEvents();
                    }
                }

                setJoinEvents();

            },

            //Join two processes to create a new Process Rule
            joinProcesses: function (vertices) {
                var process1 = this.join.processA;
                var process2 = this.join.processB;

                var link = new joint.dia.Link({
                    source: { id: process1 },
                    target: { id: process2 },
                    vertices: vertices
                });

                link.attr({
                    '.marker-target': { fill: 'black', d: 'M 10 0 L 0 5 L 10 10 z' }
                });

                try {
                    diagram.draw.addCell(link);
                }
                catch (Exception) { }

                diagram.connections.push(link);

                return false;
            },

            removeElement: function (element) {
            },

            //Removes all processes in the scenario
            clearScenario: function () {
                if( this.draw )
                    this.draw.clear();
                this.processes = [];
                this.connections = [];
            },

            //Loads a previous saved scenario
            loadScenario: function (scenario) {
                //first clear the scenario
                this.clearScenario();

                var myScenario = scenario;
                var processes = scenario.processes;
                var connections = scenario.connections;

                //Set name and scenario id
                this.name = myScenario.name;
                this.id_scenario = myScenario["_id"];
                $("#scenario_name").html(myScenario.name);

                //Draw the process and decision boxes
                for (var process in processes)
                    this.setProcess(processes[process]);

                //Draw the connectors
                for (var connection in connections) {
                    var link = connections[connection];
                    //try{
                        this.join.processA = this.getModelByCustomId(link.shape.source).id;
                    //}catch(e){}
                    //try{
                        this.join.processB = this.getModelByCustomId(link.shape.target).id;
                    //}catch(e){}

                    this.joinProcesses(link.shape.vertices);
                }


            },

            //Returns the shape by the customId
            getModelByCustomId: function (processId) {
                //debugger;
                var process = null;
                for (var i in this.processes) {
                    var temp = this.processes[i];
                    if ( temp.processId == processId) {
                        process = temp;
                        break;
                    }
                }
                return process;
            },


            //Returns an array of elements positioned in the scenario
            getSVGScenario: function () {
                var scenario = {
                    name: this.name,
                    processes: [],
                    connections: []
                };

                //Get the process and decision shapes
                for (var i in this.processes) {
                    if (this.processes[i] != undefined) {
                        var thisProcess = this.processes[i];

                        var element = {
                            position: thisProcess.attributes.position,
                            size: thisProcess.attributes.size,
                            attrs: {
                                rect: {
                                    fill: thisProcess.attributes.attrs.rect.fill,
                                    stroke: thisProcess.attributes.attrs.rect.stroke
                                }
                            }
                        };
                        scenario.processes.push({
                            processId: thisProcess.processId,
                            status: thisProcess.status,
                            shape: element,
                            type: thisProcess.type
                        });
                    }
                }
                //Get the connectors
                for (var i in this.connections) {
                    if (this.connections[i] != undefined) {
                        var thisConnection = this.connections[i];

                        //Save the processId instead the original id
                        var source = this.paper.getModelById(thisConnection.attributes.source.id).processId;
                        var target = this.paper.getModelById(thisConnection.attributes.target.id).processId;

                        //var source = sourceObject.processId;
                        //var target = targetObject.processId;

                        var element = {
                            source: source,
                            target: target,
                            vertices: thisConnection.attributes.vertices
                        };
                        scenario.connections.push({
                            shape: element
                        });
                    }
                }

                return scenario;
            },

            diagramNameExists : function(diagramName){
                var name = diagramName;
                var answer = false;
                if(typeof name== "undefined" || name == null || name == ""){
                    answer = true;
                }
                jQuery.ajax({
                    url: "/Processes/Diagram/diagramExists",
                    type: "POST",
                    data: {name: name},
                    async: false,
                    beforeSend: _loading,
                    success: function(data){
                        _loading();
                        if( data == "true"){
                            answer = true;
                        }else{
                            answer = false;
                        }
                    },
                    error: function(errorThrown){
                        answer = true;
                        _loading();
                    }
                });
                return answer;
            },

            saveScenario: function () {
                var scenarioObj = this.getSVGScenario();
                if( typeof scenarioObj.name == "undefined" || scenarioObj.name.trim() == "" ){
                    scenario_name_modal.open();
                }else{
                    var scenario = JSON.stringify(scenarioObj);
                    $.ajax({
                        url: "/Processes/Diagram/SaveDiagram",
                        data: { id_diagram: this.id_scenario, scenario: scenario },
                        type: "POST",
                        beforeSend: _loading,
                        complete: _loading,
                        success: function (data) {
                            var result = JSON.parse(data);
                            if(result.status == "success"){
                                scenarioObj._id = diagram.id_scenario = result.id;
                                diagram_modal.setScenario(scenarioObj);
                                _alert("success", "Guardado Correctamente")
                            }
                            else{
                                _alert("error",result.message);
                            }                            
                        },
                        error: function () {
                            _alert("error", "Ha ocurrido un error");
                        }
                    });
                }
            },

            bindActions: function () {

                //Create a new processes join
                $("#new_join").click(function () {
                    diagram.startJoining();
                    $(this).addClass("selected");
                });

                //Create a new process or decision element
                $("#new_process, #new_decision").click(function () {
                    if (this.id == "new_process") {
                        //diagram.setProcess({ type: "process" });
                        process_modal.open();
                    }
                    else
                        diagram.setProcess({ type: "decision" });

                });

                //Listen for a removed element and remove it from the diagram object
                this.draw.on("remove", function (cell) {
                    if (cell.attributes.type === "link") {
                        for (var i in diagram.connections) {
                            if (diagram.connections[i].id == cell.id) {
                                diagram.connections.splice(i, 1);
                                break;
                            }
                        }
                    }
                    else if (cell.attributes.type === "basic.Rect") {
                        for (var i in diagram.processes) {
                            if (diagram.processes[i].id == cell.id) {

                                //And show again in the processes list
                                var showAgain = diagram.processes[i].processId;
                                $("li[data-id=" + showAgain + "]").show();

                                diagram.processes.splice(i, 1);

                                break;
                            }
                        }
                    }
                });

                //Remove a location with the delete keyboard button
                $("body").keyup(function (event) {
                    //delete button
                    if (event.keyCode == 46) {
                        var processes = diagram.processes;
                        var toDelete;

                        for (var process in processes) {
                            if (typeof processes[process].fixResize == "function") {
                                toDelete = processes[process];
                                break;
                            }
                        }

                        if (toDelete) {
                            _confirm({
                                title: "Eliminar Ubicación",
                                message: "¿Desea eliminar esta ubicación del Diagrama?",
                                action: function () {
                                    toDelete.fixResize();
                                    toDelete.remove();
                                }
                            });
                        }
                    }

                });

                //Save the entire diagram
                $("#save_scenario").bind("click", function () {
                    diagram.saveScenario();
                });

                //Open or create a new diagram
                $("#new_scenario").bind("click", function () {
                    //diagram_modal.resetScenario();
                    diagram_modal.open();
                });

                //Edit scenario name
                $("#edit_scenario").bind("click", function () {
                    scenario_name_modal.open();
                });
            }
        };

        // Object created to manage the process´s attributes
        process = {

            name: "", 
            status: "", 
            id: "",
            min_duration: {duration: "", type: ""},
            max_duration: {duration: "", type: ""},
            type: "",

            set: function (attr, val) {
                this[attr] = val
            },

            fillForm: function () {
                $("#process_name").val(this.name);
                $("#process_status").val(this.status);
                $("input[name=min_length]").val(this.min_duration.duration);
                $("select[name=min_length_type]").val(this.min_duration.type);
                $("input[name=max_length]").val(this.max_duration.duration);
                $("select[name=max_length_type]").val(this.max_duration.type);

                var processType = this.type;
                if(processType != "undefined" && processType != "")
                    $("#process_type input[value="+ processType +"]").prop("checked",true)
                else
                    $("#process_type input[value=manual]").prop("checked",true)
            },

            unbindActions: function(){
                $("#save_process").unbind("click.saveProcess");
            },

            bindActions: function () {
                $("#save_process").unbind("click.saveProcess");
                $("#save_process").bind("click.saveProcess",function () {
                    var p1 = diagram.getModelByCustomId(process.id);
                    var name = $("#process_name").val();
                    var status = $("#process_status").val();
                    var type = $("#process_type input:checked").val();
                    
                    var processData = $("#processForm").serialize();
                    processData += "&processId=" + process.id;
                    $.ajax({
                        url: "/Processes/Process/saveProcessFull",
                        type: "POST",
                        data: processData,
                        beforeSend: _loading,
                        success: function(data){
                            _alert("success","Proceso Guardado");
                            _loading();
                        },
                        error: function(errorThrown){
                            _alert("error","Ocurrion un error, intente nuevamente");
                            _loading();
                        }
                    });

                    process.set("name", name);
                    process.set("status", status);
                    process.set("type", type);

                    //Set the process object
                    p1.attr({ text: { text: name } });
                    p1.status = status;

                    //Set the tag attribute
                    var tag = $("#processes_list [data-id="+ p1.processId +"]");
                    tag.find("#text_name").text(name);
                    tag.data("status",status);

                    tag.unbind("click.addProcess", addProcessFromList);
                    tag.bind("click.addProcess", addProcessFromList);

                    return false;
                });

            }

        };

        //Object created to manage the decision's attribute
        decision = {

            id: null, name: "",

            set: function (attr, val) {
                this[attr] = val;
            },

            fillForm: function () {
                $("#process_name").val(this.name);
            },

            unbindActions: function(){
                $("#save_process").unbind("click.saveDecision");
                this.id = null;
                this.name = "";
            },
            
            bindActions : function(){
                $("#save_process").unbind("click.saveDecision");                
                $("#save_process").bind("click.saveDecision",function () {
                    
                    var name = $("#process_name").val();

                    if(decision.id != null){
                        if(true){}
                        var decision_shape = diagram.paper.getModelById(decision.id);
                        decision_shape.attr("text/text", name);
                        decision_shape.attr("text/font-weight", "bold");
                    }
                    else
                        _alert("error", "Ningún elemento seleccionado");

                    return false;
                });
            }
        };

        //Add a new process from the processes list
        function addProcessFromList() {

            var element = $(this).closest("li");
            var id = element.data("id");
            var status = element.data("status");

            //Check if process is already in the scenario
            var check = diagram.getModelByCustomId(id);

            if (check == null) {
                var newProcess = {
                    type: "process",
                    name: element.find("#text_name").text(),
                    status: status,
                    processId: id
                }

                diagram.setProcess(newProcess);
            }
            else
                _alert("error", "Proceso ya se encuentra en el escenario");

        }
        $(".btn#add_process").bind("click.addProcess", addProcessFromList);

        // Hide navigation bar for a wider view
        $(".hide_navigation i").removeClass("icon-chevron-left");
        $(".hide_navigation i").addClass("icon-chevron-right");
        $("#main_navigation").hide();
        $("#content").css("margin-left", "0px");

        diagram_modal.open();
        diagram.init();
        diagram.bindActions();

    });
</script>
