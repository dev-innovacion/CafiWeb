@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Kendo.Mvc.UI;
@using Kendo.Mvc;
@using RivkaAreas.ObjectReference.Models;
@{
    ViewBag.Title = "Index";
    int validate = 1;

    var datos = Session["Permissions"].ToString();
    JObject allp = JsonConvert.DeserializeObject<JObject>(datos);
    var upd = "";
    var del = "";
    var add = "";
    foreach (string x in allp["objectsreference"]["grant"])
    {
        if (x.Contains("u"))
        {
            upd = "u";
        }
        if (x.Contains("d"))
        {
            del = "d";
        }
        if (x.Contains("c"))
        {
            add = "c";
        }
    }

    var dataclient = Session["PermissionsClient"].ToString();
    JObject dataclientjo = JsonConvert.DeserializeObject<JObject>(dataclient);
    var updc = "";
    var delc = "";
    var addc = "";
    foreach (string x in dataclientjo["objectsreference"]["grant"])
    {
        if (x.Contains("u"))
        {
            updc = "u";
        }
        if (x.Contains("d"))
        {
            delc = "d";
        }
        if (x.Contains("c"))
        {
            addc = "c";
        }
    }
}

<!-- Common Kendo UI Web CSS -->
<link href="/Content/kendo/2014.1.318/kendo.common.min.css" rel="stylesheet" />
<!-- Default Kendo UI Web theme CSS -->
<link href="/Content/kendo/2014.1.318/kendo.default.min.css" rel="stylesheet" />

<!-- Kendo UI Web combined JavaScript -->
<script src="/Scripts/kendo/2014.1.318/kendo.web.min.js"></script>
<script src="/Scripts/kendo/2014.1.318/kendo.treeview.min.js"></script>

<div class="widgets_area">

    <div class="row-fluid">
        <div class="span12">
            <div class="span8">
                <h3 class="ModuleTitle">Activos de Referencia</h3>
            </div>
            <div class="span4">
                <div class="search">
                    <input type="text" data-provide="typeahead" id="globalSearch" name="globalSearch" class="typehead span8" placeholder="Búsqueda" data-source="" />
                    <button type="submit" class="square-button green" id="globalSearchButton"><i class="icon-search"></i></button>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="row-fluid">
        <div class="span12">
            <div class="span3">
                <div class="span12">
                    <div class="light_blue set_color">
                        <div class="well-header widgetclient titleclient">
                            <h5>Tipo de Activos</h5>
                        </div>
                        <div class="well-content no-search">
                            <div class=" k-header">
                                <div id="category_tree">
                                </div>
                            </div>      
                            
                        </div>
                    </div>
                </div>
            </div>
            <div class="span9">
                <div class="row-fluid">
                    <div class="span12">
                        <div class="light_blue set_color">
                            <div class="well-header widgetclient titleclient">
                                <h5 id="category_header">Tipo de Activos</h5>
                                <div class="btn-group" id="thisCategoryOptions">
                                    <button class="btn btn-mini purple" id="locatpopup" data-original-title="Mosaicos" rel="tooltip" data-placement="top">
                                        <i class=" icon-home icon-white"></i>
                                        <span></span>
                                    </button>
                                    @if (del == "d" && delc=="d")
                                    {
                                        <button type="button" class="btn btn-mini red delete" id="deleteObjectsButton" data-original-title="Eliminar Objetos Seleccionados." rel="tooltip" data-placement="top">
                                            <i class="icon-trash icon-white"></i>
                                        </button>
                                    }
                                    <button id="importbtn" class="btn btn-mini purple  fileinput-button" data-idcat="0">
                                        <i class="icon-cloud-upload icon-white"></i>
                                        <span>Importar</span>
                                        <input type="file" id="T9" />
                                    </button>

                                    @if (add == "c" && addc=="c")
                                    {
                                        <button class="btn btn-mini dark_green fileinput-button dropdown" data-toggle="dropdown" href="#" data-original-title="Agregar" rel="tooltip" data-placement="top">
                                            <i class="icon-plus"></i>
                                            <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li class="btn-mini">
                                                <a href="#" id="addCategoryButton">
                                                    <i class="icon-folder-close"></i>
                                                    <label>Tipo de Activo</label>
                                                </a>
                                            </li>
                                            <li class="btn-mini">
                                                <a href="#" id="addObjectButton">
                                                    <i class="icon-barcode"></i>
                                                    <label>Objeto</label>
                                                </a>
                                            </li>
                                        </ul>
                                    }
                                    @if (upd == "u" && updc=="u")
                                    {
                                        <button class="btn btn-mini orange fileinput-button" id="editParentCategoryButton" data-original-title="Editar este tipo de activo" rel="tooltip" data-placement="top">
                                            <i class="icon-edit icon-white"></i>
                                            <span></span>
                                        </button>
                                    }
                                    @if (del == "d" && delc=="d")
                                    {
                                        <button class="btn btn-mini red delete" id="deleteParentCategoryButton" data-original-title="Eliminar este tipo de activo" rel="tooltip" data-placement="top">
                                            <i class="icon-trash icon-white"></i>
                                            <span></span>
                                        </button>
                                    }

                                    <!-- View Buttons -->
                                    <button class="btn btn-mini dark_green" id="toTileViewButton" data-original-title="Mosaicos" rel="tooltip" data-placement="top">
                                        <i class=" icon-th-large icon-white"></i>
                                        <span></span>
                                    </button>
                                    <button class="btn btn-mini orange" id="toSliderViewButton" data-original-title="Slider" rel="tooltip" data-placement="top">
                                        <i class=" icon-resize-horizontal icon-white"></i>
                                        <span></span>
                                    </button>
                                    <button class="btn btn-mini light_blue" id="toTableViewButton" data-original-title="Tabla" rel="tooltip" data-placement="top">
                                        <i class=" icon-th-list icon-white"></i>
                                        <span></span>
                                    </button>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="span12">
                        <ul class="breadcrumb" id="categoryRoute">
                            <li id="root" class="active" data-id="null">Home</li>
                        </ul>
                    </div>
                    <div class="span12 well-content no_padding">
                        <ul class="nav nav-tabs" id="myTab">
                            <li class="active"><a href="#categoriesTab" data-toggle="tab">Tipo de Activos <span id="counterCategories" class="badge badge-info"></span></a></li>
                            <li><a href="#objectsTab" data-toggle="tab">Objetos <span id="counterObjects" class="badge badge-info"></a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="categoriesTab">
                            </div>
                            <div class="tab-pane" id="objectsTab">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
                                       
    <div id="excelTable" class="modal hide fade" data-backdrop="static" style="min-width: 1000px; left: 35%; display: block;">
       
      
        
        
    </div>
@if (del == "d" && del=="d")
{ 
    <div id="deleteCategory" class="modal hide fade" data-backdrop="static">
        <div class="modal-header">

            <h3 class="modal-header-text">Eliminar Cateogría</h3>
        </div>
        <div class="modal-body">
        </div>
        <div class="modal-footer">
            <input value="Borrar" class="btn red" type="submit" id="delete_accept_button">
            <input value="Cancelar" class="btn grey" type="button" id="delete_cancel_button">
        </div>
    </div>
}
@if ((add == "c" && addc=="c") || (upd == "u" && updc=="u"))
{ 
    <div id="object_panel" class="modal hide fade" tabindex="-1" data-backdrop="static">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true" id="cancel_buttonx"><i class="icon-remove" style="margin-top: 10px; margin-right: 10px"></i></button>
            <h3 class="modal-header-text">Agregar Objeto</h3>
        </div>
        <form id="objectForm" method="post" enctype="multipart/form-data" autocomplete="off">
            <div class="modal-body">

                <div class="navbar-inner">
                    <ul class="nav nav-tabs" id="tabHeader1">
                        <li class="active" id="staticFormHeader"><a href="#staticFieldsSection" data-toggle="tab">Inf. General</a></li>
                    </ul>
                </div>
                <div class="tab-content" id="tabContent1">
                    <div class="tab-pane active staticFieldsSection perfilMargen" id="staticFieldsSection">

                        <table width="100%">
                            <tr>
                                <td width="50%">
                                    <label>ID Artículo: </label>
                                    <div class="staticField">
                                        <input type="text" id="object_id" name="object_id" required="required" placeholder="Id artículo" data-original-title="El nombre sólo puede contener caracteres alfabéticos." rel="tooltip" data-placement="right" />
                                    </div>
                                    <br/>
                                    <label>Descripción: </label>
                                    <div class="staticField">
                                        <input type="text" id="name" name="name" required="required" placeholder="Nombre Nombre" data-original-title="El nombre sólo puede contener caracteres alfabéticos." rel="tooltip" data-placement="right" />
                                    </div>
                                    <label for="_htkObjectImage">Imagen: </label>
                                    <div class="staticField">
                                        <input type="file" id="_htkObjectImage" />
                                    </div>
                                    <label> </label>
                                    @*<label>Responsable: </label>
                                    <div class="staticField">
                                        <select id="userSelect" name="userSelect">
                                            @ViewData["userList"]
                                        </select>
                                    </div>*@
                                    
                                </td>
                                <td>
                                    <img id="_HTKImagePreview" />
                                </td>
                            </tr>
                            <tr>
                                <td width="50%">
                                    <label>Marca: </label>
                                    <div class="staticField">
                                        <input type="text" id="marca" name="marca" placeholder="Marca"  data-placement="right" />
                                    </div>
                                </td>
                                <td width="50%">
                                    <label>Modelo: </label>
                                    <div class="staticField">
                                        <input type="text" id="modelo" name="modelo" placeholder="Modelo" data-placement="right" />
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td width="50%">
                                    <label>ID Perfil Activo: </label>
                                    <div class="staticField">
                                        <input type="text" id="perfil" name="perfil" placeholder="Perfil Activo" data-placement="right" />
                                    </div>
                                </td>
                                <td width="50%">
                                    <label>Departamento: </label>
                                    <div class="staticField">
                                        <select id="departamentoSelect" name="departamentoSelect">
                                            @ViewData["departList"]
                                        </select>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td width="50%">
                                    <label class="lanelMargen" id="lblfavlocation">Tipo de Activo :</label>
                                    <select id="assetSelect" name="category">
                                        @ViewData["categoryList"]
                                    </select>
                                    @*<label>Ubicación: </label>
                                    <div class="staticField">
                                        <select id="ubicacionSelect" name="ubicacionSelect">
                                            <option value=null>Seleccione</option>
                                        </select>
                                    </div>*@
                                </td>
                                <td width="50%">
                                    <label>Precio Compra: </label>
                                    <div class="staticField">
                                        <input type="text" id="precio" name="precio" placeholder="Precio Compra" data-placement="right" />
                                    </div>
                                </td>
                            </tr>

                            <tr>
                                <td width="50%">
                                    

                                </td>
                            </tr>
                            @*<tr>
                                <td width="50%">
                                    <div id="divprints">
                                        <div id="btnprint" class='btn blue fileinput-button'>Etiquetas</div>

                                    </div>

                                </td>
                            </tr>*@
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <span width="80%" id="final_msg" class="error_msg"></span>
                <input value="Guardar" class="btn blue" type="submit" id="save_button">
                <input value="Cancelar" class="btn grey" type="button" id="cancel_button">
            </div>
        </form>
    </div>


  
}

<div id="locationsPanel" class="modal modal-mini hide fade" tabindex="-1" data-backdrop="static">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove" style="margin-top: 10px; margin-right: 10px"></i></button>
        <h3 class="modal-header-text">Selecciona la ubicacion a asignar:</h3>
    </div>
    <div class="modal-body">

        <div id="tablausers">
            <label class="lanelMargen">Ubicaciones </label>
            <div class="divTree">
                <div class="well-content no-search">
                    <div class="portlet-body fuelux">
                        <ul class="tree" id="location_tree2"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <input value="Guardar" class="btn blue" id="save_button2">
        <input value="Cancelar" data-dismiss="modal" class="btn grey" type="button" id="cancel_button2">
    </div>
</div>

<div id="locationsPanel2" class="modal modal-mini hide fade" tabindex="-1" data-backdrop="static">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove" style="margin-top: 10px; margin-right: 10px"></i></button>
        <h3 class="modal-header-text">Selecciona la ubicacion a asignar:</h3>
    </div>
    <div class="modal-body">

        <div id="tablausers">
            <label class="lanelMargen">Ubicaciones </label>
            <div class="divTree4">
                <div class="well-content no-search">
                    <div class="portlet-body fuelux">
                        <ul class="tree" id="location_tree"></ul>
                    </div>
                </div>
            </div>
            
        </div>
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <input value="Guardar" class="btn blue" id="save_button3">
        <input value="Cancelar" data-dismiss="modal" class="btn grey" type="button" id="cancel_button3">
    </div>
</div>


<div id="printPanel" class="modal modal-mini hide fade" tabindex="-1" data-backdrop="static">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="icon-remove" style="margin-top: 10px; margin-right: 10px"></i></button>
        <h3 class="modal-header-text">Imprimir Etiquetas</h3>
    </div>
    <div class="modal-body">
        <div class="well-content">
            <label>Cantidad: </label>
            <div class="staticField">
                <input type="text" name="number_labels" value="0" />
            </div>
            <div class="staticField printLabel" >
                <button class="btn green" type="button">Imprimir</button>
            </div>
            
            <label class="lanelMargen" >Posicionar en:</label>
            <div class="staticField">
                <label id="lbllocation" data-idlocation="null"></label>
                <div id="btncambiar2" class='btn blue fileinput-button'>Cambiar</div>
            </div>
            
            
        </div>
        
    </div>
    <div class="modal-footer">
        <span width="80%" id="final_msg" class="error_msg"></span>
        <input value="Cancelar" data-dismiss="modal" class="btn grey" type="button" id="cancel_button4">
    </div>
</div>

@section scripts{

    <script src="~/RivkaBase/Scripts/RivkaViewer/RivkaViewer.js"></script>
    <script src="~/RivkaBase/Scripts/RivkaTree/RivkaTree.js"></script>

    <script type="text/javascript">
        var add = "";
        var upd = "";
        var del = "";
        var delc = "";
        var addc = "";
        var updc = "";
        var idcat = "";
        var updTree = "";
        var datos = null;
        var numbtn = null;
        var categoriesViewer = new RivkaViewer("categoriesTab");
        var objectsViewer = new RivkaViewer("objectsTab");

         @if ( upd == "u" && updc=="u")
            { 
                @(new HtmlString("updTree = 'active';"))
            }

        //Object used to print labels
        var printLabel = {
            number: 0,
            print: function () {
                var quantity = jQuery("input[name=number_labels]").val();
                var location = jQuery("#lbllocation").data("idlocation");

                quantity = parseInt(quantity);

                if ( isNaN(quantity) || quantity < 0)
                    quantity = 0;

                jQuery("input[name=number_labels]").val(quantity);

                if (quantity > 0) {
                    _confirm({
                        title: "Imprimir Etiquetas",
                        message: "Desea Imprimir " + quantity + " etiquetas?",
                        action: function () {
                            jQuery.ajax({
                                url: "/ObjectReference/Object/PrintLabel",
                                type: "POST",
                                data: { objid: model.selectedID, quantity: quantity, location: location },
                                success: function (data) {
                                    var cad = JSON.parse(data);
                                    jQuery("#printPanel").modal("hide");
                                    _alert(cad.tipo, cad.cadena);
                                       
                                    
                                },
                                error: function (data) {
                                    var cad = JSON.parse(data);
                                    jQuery("#printPanel").modal("hide");
                                    _alert(cad.tipo, cad.cadena);
                                }

                            });
                        }
                    });
                }
                else {
                    _alert("error", "Asigne el número de Etiquetas");
                    jQuery("input[name=number_labels]").focus();
                }
            },
            init: function () {
                //Asign event to the button
                jQuery(".printLabel button").click(function () {
                    printLabel.print();
                })
                //Event to control the enter key
                jQuery("input[name=number_labels]").on("keydown", function (e) {
                    if (e.keyCode == 13) {
                        printLabel.print();
                        return false;
                    }
                });
            }
        }

        printLabel.init();

        var tree = new RivkaTree("category_tree", {
            method: RivkaTree.METHODS.AJAX,
            url: "/ObjectReference/Category/getNodeContent",
            idKey: "_id",
            nameKey: "name",
            dragdrop: updTree,
            dragurl: "/ObjectReference/Category/updateParent",
            onNodeSelectAction: function () {
                var id = jQuery(this).closest("li").data("idcategory");
                location.hash = id;
                model.parentCategory = id;
                model.init();
            }
        });

        function obtenerNodes(nodoid) {
            jQuery.ajax({
                url: "/ObjectReference/Category/getNodeContent2",
                type: "POST",
                data: { parentCategory: nodoid },
                async: false,
                success: function (data) {
                    var locations = JSON.parse(data);
                    datos = locations;
                },
                error: function (data) {
                    //_alert("error","Ha ocurrido un error");
                }
            });
        }

        function CrearObjetos(objid,location,cantidad,epc) {
            jQuery.ajax({
                url: "/ObjectReference/Object/saveObjects",
                type: "POST",
                data: { obj: objid, location: location, cantidad: cantidad, EPC: epc },
                async: false,
                success: function (data) {
                    _alert("success", "Han sido creados nuevos activos.");
                },
                error: function (data) {
                    _alert("error","Ha ocurrido un error");
                }
            });
        }

        function LoadLocationsAll() {
            jQuery.ajax({
                url: "/ObjectReference/Object/loadLocationsAlls",
                type: "POST",
                async: false,
                success: function (data) {
                    jQuery("#ubicacionSelect").html(data);
                }
            });
        }

        var tree3 = new RivkaTree("location_tree", {
            method: RivkaTree.METHODS.AJAX,
            url: "/ObjectReference/Object/getNodeLocation",
            idKey: "_id",
            nameKey: "name",
            onNodeSelectAction: function () {
                var id = jQuery(this).closest("li").data("idcategory");
               
               
            }
        });

        var tree2 = new RivkaTree("location_tree2", {
            method: RivkaTree.METHODS.AJAX,
            url: "/ObjectReference/Object/getNodeLocation",
            idKey: "_id",
            nameKey: "name",
            onNodeSelectAction: function () {
                var id = jQuery(this).closest("li").data("idcategory");


            }
        });

        function setTree3(id) {
            if (id != "undefined" && id != null && id != "") {
                jQuery.ajax({
                    url: "/ObjectReference/Object/getRoute2",
                    data: { parentCategory: id },
                    type: "POST",
                    async: false,
                    beforeSend: _loading(),
                    success: function (data) {
                        var data = JSON.parse(data);
                        tree3.openRoute(data["route"]);
                        _loading();
                    }, error: function () {
                        _loading();
                        _alert("error", "Ha ocurrido un error");
                    }
                });
            }
        }
        //var tree = new RivkaTree("category_tree", {
        //    method: RivkaTree.METHODS.AJAX,
        //    url: "/ObjectReference/Category/getNodeContent",
        //    idKey: "_id",
        //    nameKey: "name",
        //    dragdrop: updTree,
        //    dragurl: "/ObjectReference/Category/updateParent",
        //    onNodeSelectAction: function () {
        //        var id = jQuery(this).closest("li").data("idcategory");
        //        location.hash = id;
        //        model.parentCategory = id;
        //        model.init();
        //    }
        //});

        jQuery.fn.reset = function () {
            jQuery(this).each(function () { this.reset(); });
        }


        var locationmodal = {
            asignarubicacion: function () {
                var userselected = jQuery('#location_tree2 label[class="selected"]').closest("li").data("idcategory");
                var activos = jQuery(".checker:checked");
                var usuarios = [];

                for (i = 0; i < activos.length; i = i + 1) {
                    if (jQuery(activos[i]).closest("div").attr("id") == "objectsTab") {
                        var iduser = jQuery(activos[i]).closest("tr").data("id");
                        usuarios.push(iduser);
                    }
                }
                jQuery.ajax({
                    url: "/ObjectReference/Object/AsignarUbicacion",
                    datatype: "json",
                    type: "POST",
                    traditional: true,
                    data: { selectids: usuarios, idlocation: userselected },
                    async: false,
                    success: function (data) {
                        _alert("success", "Han sido actualizados");

                    },
                    error: function (data) {
                        _alert("error", "Ha ocurrido un error");
                    }
                });
            },
            bindAll: function () {

                jQuery(".checker, .checkall").bind("click", function (e) {
                    if (jQuery(this).closest("div").attr("id") == "objectsTab") {
                        var activos = jQuery(".checker");
                        var flag = "0";
                        for (i = 0; i < activos.length; i = i + 1) {
                            if (jQuery(this).is(":checked")) {
                                flag = "1";
                            }
                        }

                        if (flag == "0") {
                            jQuery("#userpopup").hide();
                        }
                        else {
                            jQuery("#userpopup").show();
                        }
                    }
                    
                });
            }
        };

        var model = {
            parentCategory:location.hash == "" ? "null" : location.hash.substring(1),
            
            selectedID: null,

           FavLocation: null,

            routeData: null,

            prototypeData: null,

            categoriesData: null,

            objectsData: null,

            init: function () {
                if (model.parentCategory == null || model.parentCategory == "null") {
                    jQuery("#deleteParentCategoryButton").hide();
                    jQuery("#editParentCategoryButton").hide();
                } else {
                    jQuery("#deleteParentCategoryButton").show();
                    jQuery("#editParentCategoryButton").show();
                }
               
                jQuery.ajax({
                    url: "/ObjectReference/Object/getData",
                    type: "POST",
                    data: { parentCategory: model.parentCategory },
                    beforeSend: _loading(),
                    success: function (data) {
                        var data = JSON.parse(data);
                        model.routeData = data["route"];
                        model.prototypeData = data["prototype"];
                        model.categoriesData = data["categories"];
                        model.objectsData = data["objects"];
                        var validate = data["idcat"];


                        //if (validate == "" || validate == "null" || validate == undefined) {
                        //    jQuery("#importbtn").hide();

                        //} else {
                            jQuery("#importbtn").show();
                            var importbtn = document.getElementById('importbtn');
                            importbtn.setAttribute('data-idcat', validate);
                      //  }
                        route.setFullRoute(data["route"]);
                      //  tree.openRoute(data["route"]);

                        var dataOptions = { id: "_id", name: "name", image: "image", permissions: [upd, del] };
                        categoriesViewer.setData(model.categoriesData, dataOptions);

                        //Count results, categories and objects
                        jQuery("#myTab #counterCategories").text(JSON.parse(model.categoriesData).length);
                        jQuery("#myTab #counterObjects").text(JSON.parse(model.objectsData).length);

                        var objectsDataOptions = { id: "_id", name: "name", image: "image", permissions: [upd, del] };
                        objectsViewer.setData(model.objectsData, objectsDataOptions);

                        table.print();
                       
                       
                           
                        _loading();
                    },
                    error: function (errorThrown) {
                        _loading();
                    }
                });
            }
        };

        var table = {

            display: "tile",

            init: function () {
                table.bindAll();
            },

            onDeleteObjectAction: function () {
                var id = null;
                if (del == "d") {
                    if (table.display == "table") {
                        id = jQuery(this).closest("tr").data("id");
                    } else {
                        id = jQuery(this).closest("div.tile").data("id");
                    }

                    _confirm({
                        title: "Eliminar Objeto",
                        message: "¿Estás segudo que deseas eliminar este Objeto?",
                        action: function () {
                            jQuery.ajax({
                                url: "/ObjectReference/Object/deleteObject",
                                type: "POST",
                                data: { id: id },
                                beforeSend: _loading,
                                success: function (data) {
                                    _alert("success", "Eliminado Correctamente");
                                    model.init();
                                    _loading();
                                },
                                error: function (errorThrown) {
                                    _alert("error", "Ha ocurrido un error.");
                                    _loading();
                                }

                            });
                        }
                    });
                }
            },

            print: function () {
                switch (table.display) {
                    case "table":
                        table.printTable();
                        break;
                    case "tile":
                        table.printTiles();
                        break
                    case "slider":
                        table.printSlider();
                        break;
                }
            },

            printTable: function () {
                jQuery("#locatpopup").hide();
                locationmodal.bindAll();
                
                table.display = "table";
                var tableOptions = {
                    headers: { "name": "Nombre", "objectCount": "#Objetos", "Creator": "Creador", "CreatedDate": "Fecha de Creación", "LastmodDate": "Última Modificación" },
                    onEditRowAction: function () {
                        jQuery(location).attr("href", "/ObjectReference/Object/createCategory?parentCategory=" + model.parentCategory + "&idProfile=" + jQuery(this).closest("tr").data("id"));
                        return false;
                    },
                    onDeleteRowAction: function () {
                        var tr = jQuery(this).closest("tr");
                        var obj = { id: tr.data("id"), name: tr.find(".name").text() };
                        deleteModal.getUsersProfile(obj);
                        return false;
                    },
                    onSelectRowAction: function () {
                        var newTr = jQuery(this);
                        route.openCategoryFromThis(newTr);
                        // tree.selectNode(newTr.data("id"));
                        var getitem = jQuery("#category_tree").data("kendoTreeView").dataSource.get(id);
                        jQuery("#category_tree").data("kendoTreeView").select(jQuery("#category_tree").data("kendoTreeView").findByUid(getitem.uid));
                        return false;
                    }
                    , showSelecters: true
                };

                categoriesViewer.setDisplayMethod(RivkaViewer.METHODS.TABLE, tableOptions);
                categoriesViewer.print();

                var objectsTableOptions = {
                    headers: { "object_id": "ID Artículo","name": "Descripción", "marca": "Marca", "modelo": "Modelo", "perfil": "Perfil Activo", "department": "Departamento", "precio": "Precio de Compra", "Creator": "Creador", "CreatedDate": "Fecha de Creación", "LastmodDate": "Última Modificación" },
                    showSelecters: true,
                    onEditRowAction: function () {
                        var tr = jQuery(this).closest("tr");
                        objectModal.onEditAction(tr);
                    },
                    onDeleteRowAction: table.onDeleteObjectAction,
                    onSelectRowAction: null
                };
                objectsViewer.setDisplayMethod(RivkaViewer.METHODS.TABLE, objectsTableOptions);
                objectsViewer.print();
                table.bindAll();
                jQuery("[rel=tooltip]").closest("a").tooltip();
                
                try {
                   var table1= jQuery("#objectsTab_rvtable").dataTable({
                        "sPaginationType": "full_numbers",
                        "sDom": "<'tableHeader'<l><'clearfix'f>r>t<'tableFooter'<i><'clearfix'p>>",
                        "iDisplayLength": 10,
                        "sScrollY": "250px",
                        "oLanguage": {
                            "sLengthMenu": "Mostrar _MENU_ registros",
                            "sInfo": "Mostrando del _START_ al _END_ de _TOTAL_ registros",
                            "sSearch": "Filtro",
                            "oPaginate": {
                                "sFirst": "Primero",
                                "sLast": "Ultimo",
                                "sNext": "Siguiente",
                                "sPrevious": "Anterior"

                            },
                            "sEmptyTable": "Tabla Sin Datos"
                        }
                    });
                    setTimeout(function () {
                        table1.fnAdjustColumnSizing();

                    }, 2000);
                } catch (e) { }
            },

            printTiles: function () {
                table.display = "tile";
                jQuery("#locatpopup").hide();
                var categoriesOptions = {
                    onEditTileAction: function () {
                        jQuery(location).attr("href", "/ObjectReference/Object/createCategory?parentCategory=" + model.parentCategory + "&idProfile=" + jQuery(this).closest("div.tile").data("id"));
                        return false;
                    },
                    onDeleteTileAction: function () {
                        var tile = jQuery(this).closest(".tile");
                        var obj = { id: tile.data("id"), name: tile.find(".tileName").text() };
                        deleteModal.getUsersProfile(obj);
                        return false;
                    },
                    onSelectTileAction: function () {
                        var newTr = jQuery(this);
                        route.openCategoryFromThis(newTr);
                        //  tree.selectNode(newTr.data("id"));
                        var getitem = jQuery("#category_tree").data("kendoTreeView").dataSource.get(id);
                        jQuery("#category_tree").data("kendoTreeView").select(jQuery("#category_tree").data("kendoTreeView").findByUid(getitem.uid));
                        return false;
                    }
                };
                categoriesViewer.setDisplayMethod(RivkaViewer.METHODS.TILE, categoriesOptions);
                categoriesViewer.print();

                var objectsOptions = {
                    onEditTileAction: function () {
                        var tr = jQuery(this).closest("div.tile");
                        objectModal.onEditAction(tr);
                    },
                    onDeleteTileAction: table.onDeleteObjectAction,
                    onSelectTileAction: null
                };
                objectsViewer.setDisplayMethod(RivkaViewer.METHODS.TILE, objectsOptions);
                objectsViewer.print();
                jQuery("[rel=tooltip]").closest("a").tooltip();
            },

            printSlider: function () {
                table.display = "slider";
                jQuery("#locatpopup").hide();
                var categoriesOptions = {
                    onEditTileAction: function () {
                        jQuery(location).attr("href", "/ObjectReference/Object/createCategory?parentCategory=" + model.parentCategory + "&idProfile=" + jQuery(this).closest("div.tile").data("id"));
                        return false;
                    },
                    onDeleteTileAction: function () {
                        var tile = jQuery(this).closest(".tile");
                        var obj = { id: tile.data("id"), name: tile.find(".tileName").text() };
                        deleteModal.getUsersProfile(obj);
                        return false;
                    },
                    onSelectTileAction: function () {
                        var newTr = jQuery(this);
                        route.openCategoryFromThis(newTr);
                        //  tree.selectNode(newTr.data("id"));
                        var getitem = jQuery("#category_tree").data("kendoTreeView").dataSource.get(id);
                        jQuery("#category_tree").data("kendoTreeView").select(jQuery("#category_tree").data("kendoTreeView").findByUid(getitem.uid));
                        return false;
                    }
                };
                categoriesViewer.setDisplayMethod(RivkaViewer.METHODS.SLIDER, categoriesOptions);
                categoriesViewer.print();

                var objectsOptions = {
                    onEditTileAction: function () {
                        var tr = jQuery(this).closest("div.tile");
                        objectModal.onEditAction(tr);
                    },
                    onDeleteTileAction: table.onDeleteObjectAction,
                    onSelectTileAction: null
                };
                objectsViewer.setDisplayMethod(RivkaViewer.METHODS.SLIDER, objectsOptions);
                objectsViewer.print();
                jQuery("[rel=tooltip]").closest("a").tooltip();
            },

            bindAll: function () {

                jQuery("#toSliderViewButton").unbind("click.toSliderView");
                jQuery("#toSliderViewButton").bind("click.toSliderView", table.printSlider);

                jQuery("#toTableViewButton").unbind("click.toTableView");
                jQuery("#toTableViewButton").bind("click.toTableView", table.printTable);

                jQuery("#toTileViewButton").unbind("click.toTileView");
                jQuery("#toTileViewButton").bind("click.toTileView", table.printTiles);

                jQuery("#addCategoryButton").unbind("click.create");
                jQuery("#addCategoryButton").bind("click.create", function () {
                    jQuery(location).attr('href', "/ObjectReference/Object/createCategory?parentCategory=" + model.parentCategory);
                });

                jQuery("#editParentCategoryButton").unbind("click.edit");
                jQuery("#editParentCategoryButton").bind("click.edit", function () {
                    jQuery.ajax({
                        url: "/ObjectReference/Category/getCategory",
                        type: "POST",
                        data: { idCategory: model.parentCategory },
                        async: true,
                        beforeSend: _loading,
                        success: function (data) {
                            _loading();
                            var objectData = JSON.parse(data);
                            var parentParent = objectData.parentCategory;
                            jQuery(location).attr('href', "/ObjectReference/Object/createCategory?parentCategory=" + parentParent + "&idProfile=" + model.parentCategory);
                        },
                        error: function (errorThrown) {
                            _loading();
                            _alert("error", "Ha ocurrido un error.");
                        }
                    });
                });

                jQuery("#deleteParentCategoryButton").unbind("click.delete");
                jQuery("#deleteParentCategoryButton").bind("click.delete", function () {
                    deleteModal.getUsersProfile({ "name": jQuery("#category_header").text(), "id": model.parentCategory });
                });

                jQuery("#globalSearchButton").bind("click.search");
                jQuery("#globalSearchButton").bind("click.search", table.onSearchAction);

                jQuery("#globalSearch").unbind("keyup.search");
                //jQuery("#globalSearch").bind("keyup.search", table.onAutoSearchAction);

                jQuery("#globalSearch").bind("keypress.checkSend", function (e) {
                    if (e.which == 13) {
                        jQuery("#globalSearchButton").click();
                    }
                });

                jQuery("#deleteObjectsButton").unbind('click.delete');
                jQuery("#deleteObjectsButton").bind('click.delete', function () {
                    var selecteds = jQuery(".checker:checked");
                    if (selecteds.length == 0) {
                        _alert("error", "Debe de seleccionar usuarios primero para eliminarlos!");
                        return;
                    }

                    _confirm({
                        title: "Eliminar Registros",
                        message: "¿Seguro que desea eliminar los registros seleccionados?",
                        action: function () {
                            var selectedIdArray = [];
                            for (i = 0; i < selecteds.length; i = i + 1) {
                                selectedIdArray.push(jQuery(selecteds[i]).closest("tr").data("id"));
                            }
                            _loading();
                            jQuery.ajax({
                                url: "/ObjectReference/Object/deleteObjects",
                                datatype: "json",
                                type: "POST",
                                data: { array: selectedIdArray },
                                traditional: true,
                                success: function (data) {
                                    model.init();
                                    _loading();
                                    _alert("success", "Eliminado Correctamente");
                                    model.restart();
                                }
                            });
                        }
                    });
                });

                jQuery("#locatpopup").unbind('click.location');
                jQuery("#locatpopup").bind('click.location', function () {
                    jQuery("#locationsPanel").modal("show");
                });

                jQuery(".checker").bind("click", function (e) {
                    if (jQuery(this).closest("div").attr("id") == "objectsTab") {
                        var activos = jQuery(".checker");
                        var flag = "0";
                        for (i = 0; i < activos.length; i = i + 1) {
                            if (jQuery(this).is(":checked")) {
                                flag = "1";
                            }
                        }

                        if (flag == "0") {
                            jQuery("#locatpopup").hide();
                        }
                        else {
                            jQuery("#locatpopup").show();
                        }
                    }
                    
                });

                jQuery(" .checkall").bind("click", function (e) {
                    if (jQuery(this).closest("div").attr("id") == "objectsTab") {
                        var activos = jQuery(".checker");
                        var flag = "0";
                        for (i = 0; i < activos.length; i = i + 1) {
                            if (jQuery(this).is(":checked")) {
                                flag = "1";
                            }
                        }

                        if (flag == "0") {
                            jQuery("#locatpopup").hide();
                        }
                        else {
                            jQuery("#locatpopup").show();
                        }
                    }
                    
                });
            },

            onSearchAction: function () {
                var stringToSearch = jQuery("#globalSearch").val();
                if (stringToSearch.trim() == "") {
                    model.init();
                } else {
                    jQuery.ajax({
                        url: "/ObjectReference/Object/globalSearch",
                        type: "POST",
                        data: { parentCategory: model.parentCategory, data: stringToSearch },
                        beforeSend: _loading,
                        success: function (data) {
                            var jData = JSON.parse(data);
                            model.categoriesData = JSON.stringify(jData["categories"]);
                            model.objectsData = JSON.stringify(jData["objects"]);

                            var dataOptions = { id: "_id", name: "name", image: "image", permissions: [upd, del] };
                            categoriesViewer.setData(model.categoriesData, dataOptions);

                            var objectsDataOptions = { id: "_id", name: "name", image: "image", permissions: [upd , del] };
                            objectsViewer.setData(model.objectsData, objectsDataOptions);

                            table.print();

                            jQuery("#category_header").text("Resultados de búsqueda: \"" + jQuery("#globalSearch").val() + "\" en \"" + jQuery("#categoryRoute li.active").text() + "\"");
                            //Count results, categories and objects
                            jQuery("#myTab #counterCategories").text(JSON.parse(model.categoriesData).length);
                            jQuery("#myTab #counterObjects").text(JSON.parse(model.objectsData).length);
                            jQuery("#globalSearch").val("");
                            _loading();
                        },
                        error: function (errorThrown) {
                            _alert("error", "Ha ocurrido un error.");
                            _loading();
                        }
                    });
                }
            },

            //Autocomplete Action :: Juan Bautista
            onAutoSearchAction: function () {
                var stringToSearch = jQuery("#globalSearch").val();
                if (stringToSearch.trim() == "") {
                    model.init();
                } else {
                    var aborto = jQuery.ajax({
                        url: "/ObjectReference/Object/globalSearch",
                        type: "POST",
                        data: { parentCategory: model.parentCategory, data: stringToSearch },
                        success: function (data) {
                            var jData = JSON.parse(data);
                            model.categoriesData = JSON.stringify(jData["categories"]);
                            model.objectsData = JSON.stringify(jData["objects"]);

                            var dataOptions = { id: "_id", name: "name", image: "image", permissions: [upd, del] };
                            categoriesViewer.setData(model.categoriesData, dataOptions);

                            var objectsDataOptions = { id: "_id", name: "name", image: "image", permissions: [upd, del] };
                            objectsViewer.setData(model.objectsData, objectsDataOptions);    
                        },
                        error: function (errorThrown) {
                            if(errorThrown.statusText != "abort");
                                _alert("error", "Ha ocurrido un error. ");
                        }
                    });
                }
            }
        };

        var route = {

            onRouteElementClickAction: function () {
                var liElement = jQuery(this).closest("li");
                model.parentCategory = liElement.data("id") == null ? "null" : liElement.data("id");
                location.hash = model.parentCategory;
                liElement.nextAll().remove();

                var liText = liElement.find("a").text();
                liElement.addClass("active");
                liElement.empty();
                liElement.text(liText);

                model.init();

                var id = model.parentCategory;
                // tree.selectNode(id);
                var getitem = jQuery("#category_tree").data("kendoTreeView").dataSource.get(id);
                jQuery("#category_tree").data("kendoTreeView").select(jQuery("#category_tree").data("kendoTreeView").findByUid(getitem.uid));
            },

            openCategoryFromThis: function (node) {
                model.parentCategory = jQuery(node).data("id");
                location.hash = model.parentCategory;
                model.init();
            },

            appendNode: function (obj) {
                try {
                    id = obj.id;
                } catch (Exception) {
                    return null;
                }
                try {
                    name = obj.name;
                } catch (Exception) {
                    return null;
                }
                var newCategoryElement = jQuery("<li/>").addClass("active").text(name).attr("data-id", id);

                var lastElement = jQuery("#categoryRoute li:last");
                lastElementText = lastElement.text();
                lastElement.removeClass("active");
                lastElement.empty();
                lastElement.append(jQuery("<a/>").text(lastElementText).on("click", route.onRouteElementClickAction));
                lastElement.append(
                    jQuery("<span/>")
                        .addClass("divider")
                        .text(">")
                );
                jQuery("#categoryRoute").append(newCategoryElement);
            },

            setFullRoute: function (object) {
                var liElement = jQuery("#root");
                liElement.nextAll().remove();
                if (!liElement.hasClass("active")) {
                    var liText = liElement.find("a").text();
                    liElement.addClass("active");
                    liElement.empty();
                    liElement.text(liText);
                }

                for (var i = object.length - 1; i >= 0; i--) {
                    route.appendNode(object[i]);
                }

                var lastElement = jQuery("#categoryRoute li:last");
                lastElementText = lastElement.text();
                jQuery("#category_header").text(lastElementText);
            }
        };



        var deleteModal = {
            modalTitle: "",

            init: function () {
                deleteModal.bindAll();
            },

            getUsersProfile: function (obj) {

                if (del == "d") {
                    categoryName = obj.name;
                    idCategory = obj.id;
                    deleteModal.modalTitle = "Eliminar Tipo de Activo - ";
                    deleteModal.modalTitle += categoryName;
                    jQuery("#deleteCategory").find("h3").html(deleteModal.modalTitle);
                    jQuery("#deleteCategory").modal("show");

                    jQuery.ajax({
                        url: '/ObjectReference/Object/getObjectByCategory',
                        data: { idCategory: idCategory },
                        beforeSend: _loading(),
                        type: "POST",
                        success: function (data) {
                            jQuery("#deleteCategory").find(".modal-body").html(data);
                            jQuery("#deleteCategory").modal("show");
                            _loading();
                        },
                        error: function (errorThrown) {
                            jQuery("#deleteCategory").modal("hide");
                            _loading();
                            _alert("error", "Ha ocurrido un error.");
                        }
                    });
                }
            },

            bindAll: function () {
                jQuery("#delete_accept_button").unbind("click.accept");
                jQuery("#delete_accept_button").bind("click.accept", function () {
                    deleteProfile();
                });

                jQuery("#delete_cancel_button").unbind("click.cancel");
                jQuery("#delete_cancel_button").bind("click.cancel", function () {
                    jQuery("#deleteCategory").modal("hide");
                });

                jQuery("#delete_cancel_buttonx").unbind("click.cancel");
                jQuery("#delete_cancel_buttonx").bind("click.cancel", function () {
                    jQuery("#excelTable").modal("hide");
                });
            }
        };

        var objectModal = {

            imageArray: {},

            init: function () {
                objectModal.bindAll();
            },

            clearModal: function () {
                jQuery("#objectForm").reset();
                objectModal.imageArray = {};
            },

            onEditAction: function (trObject) {
                var id = trObject.data("id");
                model.selectedID = id;
                jQuery("#btnprint").show();
               // LoadLocationsAll();
                jQuery.ajax({
                    url: "/ObjectReference/Object/getObject",
                    type: "POST",
                    data: { id: id },
                    async: false,
                    beforeSend: _loading,
                    success: function (data) {
                        data = JSON.parse(data);
                        model.parentCategory = data["parentCategory"];
                        _loading();
                    }
                });
                objectModal.loadForm();
                jQuery.ajax({
                    url: "/ObjectReference/Object/getObject",
                    type: "POST",
                    data: { id: id },
                    beforeSend: _loading,
                    success: function (data) {
                        var obj = JSON.parse(data);
                        setTree3(obj["location_id"]);
                        model.FavLocation = obj["location_id"];
                       // jQuery("#lblfavlocation").text("Ubicación favorita: "+jQuery('#location_tree label[class="selected"]').text());
                        jQuery("#name").val(obj["name"]);
                        jQuery("#object_id").val(obj["object_id"]);
                        jQuery("#marca").val(obj["marca"]);
                        jQuery("#modelo").val(obj["modelo"]);
                        jQuery("#perfil").val(obj["perfil"]);
                        jQuery("#precio").val(obj["precio"]);
                       
                        // jQuery("#userSelect option[value = " + obj["userSelect"] + "]").attr("selected", "selected");
                      //  jQuery("#ubicacionSelect option[value = " + obj["location_id"] + "]").attr("selected", "selected");
                        jQuery("#assetSelect option[value = " + obj["parentCategory"] + "]").attr("selected", "selected");
                        if (obj["department"] != null)
                        { jQuery("#departamentoSelect option[value = " + obj["department"] + "]").attr("selected", "selected"); }

                        for (key in obj["profileFields"]) {
                            if (jQuery("#" + key).attr("type") == "checkbox") {
                                jQuery("#" + key).attr("checked", "checked");
                            }
                            else if (jQuery("#" + key).attr("type") == "radio") {
                                jQuery("[name=" + key + "][value = " + obj["profileFields"][key].toString() + "]").attr("checked", "checked");
                            }
                            else if (jQuery("#" + key).prop("tagName") == "SELECT" && jQuery("#" + key).prop("multiple")) {
                                var values = obj["profileFields"][key].toString().split(",");
                                for (value in values) {
                                    jQuery("#" + key + " option[value = " + values[value] + "]").attr("selected", "selected");
                                }
                            }
                            else if (jQuery("#" + key).prop("type") == "file") {
                                objectModal.imageArray["" + key] = obj["profileFields"][key].toString();
                                jQuery("#" + key + "Preview").attr("src", "/Uploads/Images/ObjectReferences/CustomImages/" + obj["profileFields"][key].toString());
                            }
                            else {
                                jQuery("#" + key).val(obj["profileFields"][key].toString());
                            }
                        }
                        if (obj["ext"] != null) {
                            if (obj["ext"].toString() == "null" || obj["ext"].toString() == "") {
                                jQuery("#_HTKImagePreview").attr("src", "/Content/Images/planos/No-Imagen-Disponible-Ubicacion.png");
                            } else {
                                jQuery("#_HTKImagePreview").attr("src", "/Uploads/Images/ObjectReferences/" + id + "." + obj["ext"]);
                            }
                        } else {
                            jQuery("#_HTKImagePreview").attr("src", "/Content/Images/planos/No-Imagen-Disponible-Ubicacion.png");
                        }
                        
                        
                        
                        _loading();
                        jQuery("#object_panel").modal("show");
                    },
                    error: function (errorThrown) {
                        _loading();
                        _alert("error", "Ha ocurrido un error.");
                    }
                });
            },

            onSaveAction: function () {
                var formData = new FormData();
                var codigo = jQuery("#object_id").val();
                var result = "";
                jQuery.ajax({
                    url: "/ObjectReference/Object/RevisarIDArticulo",
                    type: "POST",
                    async: false,
                    data: { codigo: codigo, id: model.selectedID },
                    success: function (data) {
                        result = data;
                    }
                });
                if (result == "si") {
                    _alert("error", "Ese Id de Articulo ya existe.");
                    return false;
                }

                var formInfo = jQuery("#objectForm").serialize();
                var idlocation = "null";// jQuery("#ubicacionSelect").val(); // model.FavLocation;  // jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory");
                var iddepart = jQuery("#departamentoSelect").val();
                var idcategory = jQuery("#assetSelect").val();

                if (idcategory == "null") {
                    _alert("error", "Selecciona el tipo de Activo.");
                    return false;
                }

                formInfo += "&idlocation=" + idlocation + "&departamento=" + iddepart + "&categoryid=" + idcategory;
                //copiar
                var keys = Object.keys(objectModal.imageArray);
                for (i = 0; i < keys.length; i++) {
                    formInfo += "&" + keys[i] + "=" + objectModal.imageArray[keys[i]];
                }


                formData.append("file", jQuery("#_htkObjectImage")[0].files[0]);
                formData.append("data", formInfo);
                formData.append("parentCategory", model.parentCategory);
                formData.append("id", model.selectedID);
                
                jQuery.ajax({
                    url: "/ObjectReference/Object/saveObject",
                    type: "POST",
                    enctype: "multipart/form-data",
                    data: formData,
                    contentType: false,
                    processData: false,
                    beforeSend: _loading,
                    success: function (data) {
                        model.init();
                        model.selectedID = null;
                        jQuery("#object_panel").modal("hide");
                        _loading();
                        _alert("success", "Guardado Correctamente");
                    },
                    error: function (errorThrown) {
                        model.selectedID = null;
                        jQuery("#object_panel").modal("hide");
                        _alert("error", "Ha ocurrido un error.");
                        _loading();
                    }
                });
                return false;
            },

            loadForm: function () {
                if (model.parentCategory != "null") {
                    jQuery.ajax({
                        url: "/ObjectReference/Object/getObjectForm",
                        type: "POST",
                        data: { parentCategory: model.parentCategory },
                        beforeSend: _loading,
                        success: function (data) {
                            var objectData = JSON.parse(data);
                            jQuery("#staticFormHeader a").click();
                            jQuery("#staticFieldsSection").nextAll().remove();
                            jQuery("#staticFieldsSection").after(objectData.body);
                            jQuery("#staticFormHeader").nextAll().remove();
                            jQuery("#staticFormHeader").after(objectData.headers);
                            objectModal.bindAll();
                            _loading();
                        },
                        error: function (errorThrown) {
                            _loading()
                            _alert("error", "Ha ocurrido un error.");
                        }
                    });
                }
            },

            readURL: function (input, previewDivID) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        jQuery('#' + previewDivID).attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            },

            bindAll: function () {
                jQuery("#objectForm").unbind("submit.save");
                jQuery("#objectForm").bind("submit.save", objectModal.onSaveAction);

                jQuery("#addObjectButton").unbind("click.loadForm");
                jQuery("#addObjectButton").bind("click.loadForm", function () {
                    jQuery('#_HTKImagePreview').attr('src', "");
                    objectModal.loadForm();
                    objectModal.clearModal();
                    model.selectedID = null;
                    jQuery("#departamentoSelect").val("null");
                 //   LoadLocationsAll();
                    jQuery("#object_panel").modal("show");
                    jQuery("#btnprint").hide();

                });

                jQuery("#cancel_button, #cancel_buttonx").unbind("click.cancel");
                jQuery("#cancel_button, #cancel_buttonx").bind("click.cancel", function () {
                    jQuery("#object_panel").modal("hide");
                    jQuery("#objectForm").reset();
                    jQuery("#departamentoSelect").val("null");
                });

                jQuery("#_htkObjectImage").unbind("change.changeImage");
                jQuery("#_htkObjectImage").bind("change.changeImage", function () {
                    objectModal.readURL(this, "_HTKImagePreview");
                });

                jQuery("#object_panel input[type=file][id!=_htkObjectImage]").unbind("change.changeCustomFiles");
                jQuery("#object_panel input[type=file][id!=_htkObjectImage]").bind("change.changeCustomFiles", function () {
                    var inputID = jQuery(this).attr("id");
                    var id = inputID + "Preview";
                    var formData = new FormData();

                    objectModal.readURL(this, id);

                    formData.append("selectedID", model.selectedID);
                    formData.append("name", inputID);
                    formData.append("file", jQuery(this)[0].files[0]);
                    //formData.append("lastSaved", objectModal.imageArray[inputID]);
                    jQuery.ajax({
                        url: "/ObjectReference/Object/SaveCustomFile",
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        beforeSend: _loading,
                        success: function (data) {
                            objectModal.imageArray[inputID] = data;
                            _loading();
                        },
                        error: function (errorThrown) {
                            _loading();
                        }
                    });
                });
            }
        };

        jQuery(document).ready(function (jQuery) {
            model.init();
            table.init();
            tree2.init({ id: "null", name: "Home" });
            tree3.init({ id: "null", name: "Home" });

            jQuery("#userpopup").on("click", function (e) {
                jQuery("#locationPanel").modal("show");

                
            });

            function onSelect(e) {
                var dataItem = this.dataItem(e.node);
                // alert(dataItem.id);
                var id = dataItem.id;

                location.hash = id;
                model.parentCategory = id;
                jQuery("#importbtn").data("idcat",id);
                model.init();

                jQuery("#category_tree").data("kendoTreeView").findByUid(dataItem.uid).children('.k-group').remove();
                obtenerNodes(dataItem.id);
                if (datos.length > 0) {
                    jQuery("#category_tree").data("kendoTreeView").append(datos, jQuery("#category_tree").data("kendoTreeView").findByUid(dataItem.uid));
                }

            }

            function onExpand(e) {
                //var dataItem = this.dataItem(e.node);
                //$("#location_tree").data("kendoTreeView").findByUid(dataItem.uid).children('.k-group').remove();
                //obtenerNodes(dataItem.id);
                //if (datos.length > 0) {
                //    $("#location_tree").data("kendoTreeView").append(datos, $("#location_tree").data("kendoTreeView").findByUid(dataItem.uid));
                //}

                //obtenerNodes(dataItem.id);
                //$("#location_tree").data("kendoTreeView").append(datos, $("#location_tree").data("kendoTreeView").findByUid(dataItem.uid));
            }

            function onDrop(e) {
                var dataItem = this.dataItem(e.sourceNode);
                var dataItem2 = this.dataItem(e.destinationNode);
                selectedId = dataItem.id;
                var newparent = dataItem2.id;
                jQuery.ajax({
                    url: "/ObjectReference/Category/updateParent",
                    type: "POST",
                    data: { id: selectedId, newparent: newparent },
                    success: function (data) {
                        var cad = dataItem.text;
                       
                        jQuery("#category_tree").data("kendoTreeView").select(jQuery("#category_tree").data("kendoTreeView").findByUid(dataItem.uid));
                      
                        _alert("success", "Guardado Correctamente");

                    },
                    error: function () {
                        _alert("error", "Ha ocurrido un error");

                    }
                });
            }

            var nodo = "null";

            obtenerNodes(nodo);


            jQuery("#category_tree").kendoTreeView({
                dataSource: [
                        {
                            id: "null", text: "Home", expanded: true, "spriteCssClass": "objectimg", "hasChildren": true, items: datos
                        }
                ]
                ,
                dataTextField: "text",
                dragAndDrop: true,
                loadondemand: true,
                select: onSelect,
                expand: onExpand,
                drop: onDrop
            });



            objectModal.init();
            deleteModal.init();
            @if (upd != null && upd != "")
            { 
                @(new HtmlString("upd = '" + upd + "';"))
            }
            @if (del != null && del != "")
            { 
                @(new HtmlString("del = '" + del + "';"))
            }
            @if (add != null && add != "")
            { 
                @(new HtmlString("add = '" + add + "';"))
            }
             @if (addc != null && addc != "") { 
           
            @(new HtmlString("addc ='" + addc+ "';"))
            }
             @if (updc != null && updc != "") { 
            @(new HtmlString("updc = '" + updc + "';"))
             }
            @if (delc != null && delc != "") { 
           
            @(new HtmlString("delc ='" + delc+ "';"))
            }
            
            if (updc == "" || upd == "") {
                upd = "";
            }

            if (delc == "" || del == "") {

                del = "";
            }
            if (addc == "" || add == "") {

                add = "";
            }
            jQuery("#T9").bind("change.changeImage", function () {

                var fa = new FormData();
                var idcateg = jQuery("#importbtn").data("idcat");

                fa.append('file', jQuery('#T9')[0].files[0]);
                fa.append('idcategory', idcateg);
                var fileup = jQuery('#T9')[0].files[0]
                var format = fileup.name.split('.');
             
                var ext = format[format.length - 1];
                ext = ext.toLowerCase();
               
                if (ext == "xlsx") {




                    jQuery.ajax({

                        url: "/ObjectReference/Object/ImpExcel",
                        // data: { maildata : jsonmail},
                        contentType: false,
                        processData: false,
                        // data: { to: list_mail, subject: subject, message: bodymail, attachment: "none"},
                        data: fa,
                        type: "POST",
                        beforeSend: _loading(),

                        success: function (data) {

                            if (data != null) {
                                jQuery('#excelTable').html("");
                                jQuery('#excelTable').html(data);
                                jQuery('#excelTable').modal("show");
                                jQuery("#T9").val("");
                                _loading();
                            } else {
                                alert("Ocurrio un error, Verifique el Archivo Fuente");
                                jQuery("#T9").val("");
                                _loading();
                            }


                        },
                        error: function (errorThrown) {
                            alert("Ocurrio un error, intenta más tarde.");
                            jQuery("#T9").val("");
                            _loading();
                        }
                    });
                } else {
                    alert("Elija Un Archivo de Excel(solo Formato xlsx)");
                    jQuery("#T9").val("");
                  
                }

                // jQuery("#new_mail").modal("hide");

                return null;
            });


            jQuery("#save_button2").on('click', function () {
                locationmodal.asignarubicacion();
                model.init();
              
                jQuery("#locationsPanel").modal("hide");
            });

            jQuery("#save_button3").on('click', function () {

                var locat = jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory");
                var result="true";
                jQuery.ajax({
                    url: "/ObjectReference/Object/RevisarReglaUbicacion",
                    data: { idObj: model.selectedID, idLocation: locat },
                    type: "POST",
                    async: false,
                    success: function (data) {
                        result = data;
                    }, error: function () {
                        _alert("error", "Ha ocurrido un error");
                    }
                });

                if (result == "False") {
                    _confirm({
                        title: "Seleccionar Ubicacion",
                        message: "Esta ubicación no permite este objeto ¿Seguro que desea seleccionar esta ubicación?",
                        action: function () {
                            if (numbtn == 1) {
                                model.FavLocation = jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory");
                              //  jQuery("#lblfavlocation").text("Ubicación favorita: " + jQuery('#location_tree label[class="selected"]').text());
                            }
                            if (numbtn == 2) {
                                jQuery("#lbllocation").text(jQuery('#location_tree label[class="selected"]').text());
                                jQuery("#lbllocation").data("idlocation", jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory"));
                            }
                            jQuery("#locationsPanel2").modal("hide");
                        }
                    });
                } else {
                    if (numbtn == 1) {
                        model.FavLocation = jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory");
                    //    jQuery("#lblfavlocation").text("Ubicación favorita: " + jQuery('#location_tree label[class="selected"]').text());
                    }
                    if (numbtn == 2) {
                        jQuery("#lbllocation").text(jQuery('#location_tree label[class="selected"]').text());
                        jQuery("#lbllocation").data("idlocation", jQuery('#location_tree label[class="selected"]').closest("li").data("idcategory"));
                    }
                    jQuery("#locationsPanel2").modal("hide");
                }
                
            });

            jQuery("#cancel_button2").on('click', function () {
                jQuery("#locationsPanel").modal("hide");
            });

            jQuery("#cancel_button3").on('click', function () {
                jQuery("#locationsPanel2").modal("hide");
            });

            jQuery("#cancel_button4").on('click', function () {
                jQuery("#printPanel").modal("hide");
            });

            jQuery("#btncambiar").on('click', function () {
                numbtn = 1;
                jQuery("#locationsPanel2").modal("show");
            });

            jQuery("#btncambiar2").on('click', function () {
                numbtn = 2;
                jQuery("#locationsPanel2").modal("show");
            });

            //jQuery("#divprints").on('click', function () {
            //    jQuery("#lbllocation").text(jQuery("#lblfavlocation").text());
            //    jQuery("#lbllocation").data("idlocation", model.FavLocation);
                
            //   // jQuery("#lblfavlocation").text
            //    jQuery("input[name=number_labels]").val("0");
            //    jQuery("#printPanel").modal("show");
            //});
            
        });


    </script>
}